rules:
- fix: 'DOMPurify.sanitize($X, {RETURN_DOM: true});

    '
  id: harden-dompurify-usage
  languages:
  - js
  - ts
  message: DOMPurify.sanitize() was called without using RETURN_DOM or RETURN_DOM_FRAGMENT.
    This is prone to mutation XSS, which could possibly bypass existing XSS filters.
    Adding one of these options will harden against potential future DOMPurify exploits.
  metadata:
    category: security
    references:
    - https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/
    technology:
    - javascript
    - typescript
  patterns:
  - pattern: DOMPurify.sanitize($X, ...)
  - pattern-not: 'DOMPurify.sanitize($X, {RETURN_DOM_FRAGMENT: true})

      '
  - pattern-not: 'DOMPurify.sanitize($X, {RETURN_DOM: true})

      '
  severity: ERROR
- id: ajv-allerrors-true
  languages:
  - js
  - ts
  message: 'By setting `allerrors: true` in `ajv` library, all error objects will
    be allocated without limit. This allows the attacker to produce a huge number
    of errors which can lead to denial of service. Do not use `allerrors: true` in
    production.'
  metadata:
    category: security
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
    references:
    - https://ajv.js.org/options.html#allerrors
    technology:
    - ajv
  pattern-either:
  - pattern: 'new Ajv({allErrors: true},...)

      '
  - patterns:
    - pattern: 'new Ajv($SETTINGS,...)

        '
    - pattern-inside: '$SETTINGS = {allErrors: true}

        ...

        '
  severity: WARNING
- id: detect-angular-element-methods
  languages:
  - javascript
  - typescript
  message: Use of angular.element can lead to XSS if after,append,html,prepend,replaceWith,wrap
    are used with user-input.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/function/angular.element
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  mode: taint
  pattern-sinks:
  - pattern: '$SINK.html(...);

      '
  - pattern: '$SINK.append(...);

      '
  - pattern: '$SINK.prepend(...);

      '
  - pattern: '$SINK.replaceWith(...);

      '
  - pattern: '$SINK.wrap(...);

      '
  - pattern: '$SINK.after(...);

      '
  pattern-sources:
  - pattern: angular.element(...)
  severity: WARNING
- id: detect-angular-open-redirect
  languages:
  - javascript
  - typescript
  message: Use of $window.location.href can lead to open-redirect if user input is
    used for redirection.
  metadata:
    asvs:
      control_id: 5.5.1 Insecue Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
      section: V5 Validation, Sanitization and Encoding
      version: '4'
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsJs
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  patterns:
  - pattern: '$window.location.href = ...

      '
  - pattern-not: '$window.location.href = "..."

      '
  severity: ERROR
- id: detect-angular-resource-loading
  languages:
  - javascript
  - typescript
  message: $sceDelegateProvider allowlisting can introduce security issues if wildcards
    are used.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsJs
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  pattern-either:
  - pattern: '$sceDelegateProvider.resourceUrlWhitelist([...,''**'',...]);

      '
  - patterns:
    - pattern: '$sceDelegateProvider.resourceUrlWhitelist([...,$DOM,...]);

        '
    - metavariable-regex:
        metavariable: $DOM
        regex: ^'.*\*\*.+'$
  severity: WARNING
- id: detect-angular-sce-disabled
  languages:
  - javascript
  - typescript
  message: $sceProvider is set to false. Disabling Strict Contextual escaping (SCE)
    in an AngularJS application could provide additional attack surface for XSS vulnerabilities.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  pattern: '$sceProvider.enabled(false);

    '
  severity: ERROR
- fix: ''
  id: detect-angular-trust-as-css-method
  languages:
  - javascript
  - typescript
  message: The use of $sce.trustAsCss can be dangerous if unsanitized user input flows
    through this API.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsCss
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  patterns:
  - pattern-either:
    - pattern: '$SOURCE = $scope.$INPUT;

        $sce.trustAsCss($SOURCE);

        '
    - pattern: '$sce.trustAsCss($scope.$INPUT);

        '
  - pattern-inside: 'app.controller(..., function($scope,$sce){

      ...

      });

      '
  severity: WARNING
- fix: ''
  id: detect-angular-trust-as-html-method
  languages:
  - javascript
  - typescript
  message: The use of $sce.trustAsHtml can be dangerous if unsanitized user input
    flows through this API.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsHtml
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  patterns:
  - pattern-either:
    - pattern: '$SOURCE = $scope.$INPUT;

        $sce.trustAsHtml($SOURCE);

        '
    - pattern: '$sce.trustAsHtml($scope.$INPUT);

        '
  - pattern-inside: 'app.controller(..., function($scope,$sce){

      ...

      });

      '
  severity: WARNING
- fix: ''
  id: detect-angular-trust-as-js-method
  languages:
  - javascript
  - typescript
  message: The use of $sce.trustAsJs can be dangerous if unsanitized user input flows
    through this API.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsJs
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  patterns:
  - pattern-either:
    - pattern: '$SOURCE = $scope.$INPUT;

        $sce.trustAsJs($SOURCE);

        '
    - pattern: '$sce.trustAsJs($scope.$INPUT);

        '
  - pattern-inside: 'app.controller(..., function($scope,$sce){

      ...

      });

      '
  severity: WARNING
- id: detect-angular-trust-as-method
  languages:
  - javascript
  - typescript
  message: The use of $sce.trustAs can be dangerous if unsanitized user input flows
    through this API.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  mode: taint
  pattern-sinks:
  - pattern: $sce.trustAs(...)
  - pattern: $sce.trustAsHtml(...)
  pattern-sources:
  - patterns:
    - pattern-inside: 'app.controller(..., function($scope,$sce) {

        ...

        });

        '
    - pattern: $scope.$X
  severity: WARNING
- fix: ''
  id: detect-angular-trust-as-resourceurl-method
  languages:
  - javascript
  - typescript
  message: The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user
    input flows through this API.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsResourceUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  patterns:
  - pattern-either:
    - pattern: '$SOURCE = $scope.$INPUT;

        $sce.trustAsResourceUrl($SOURCE);

        '
    - pattern: '$sce.trustAsResourceUrl($scope.$INPUT);

        '
  - pattern-inside: 'app.controller(..., function($scope,$sce){

      ...

      });

      '
  severity: WARNING
- fix: ''
  id: detect-angular-trust-as-url-method
  languages:
  - javascript
  - typescript
  message: The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows
    through this API.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
  patterns:
  - pattern-either:
    - pattern: '$SOURCE = $scope.$INPUT;

        $sce.trustAsUrl($SOURCE);

        '
    - pattern: '$sce.trustAsUrl($scope.$INPUT);

        '
  - pattern-inside: 'app.controller(..., function($scope,$sce){

      ...

      });

      '
  severity: WARNING
- id: detect-angular-translateprovider-useStrategy-method
  languages:
  - javascript
  message: If the $translateSanitization.useStrategy is set to null or blank this
    can be dangerous.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
    - typescript
  patterns:
  - pattern: '$translateSanitization.useStrategy();

      '
  - pattern-inside: 'app.controller(..., function($scope,$sce){

      ...

      });

      '
  severity: WARNING
- id: detect-angular-translateprovider-translations-method
  languages:
  - javascript
  message: The use of $translateProvider.translations method can be dangerous if user
    input is provided to this API.
  metadata:
    category: security
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    technology:
    - angular
    - typescript
  patterns:
  - pattern: '$translateProvider.translations(...,$SOURCE);

      '
  - pattern-inside: 'app.controller(..., function($scope,$sce){

      ...

      });

      '
  severity: WARNING
- id: apollo-axios-ssrf
  languages:
  - js
  message: User-controllable argument $DATAVAL to $METHOD passed to Axios via internal
    handler $INNERFUNC. This could be a server-side request forgery. A user could
    call a restricted API or leak internal headers to an unauthorized party. Validate
    your user arguments against an allowlist of known URLs, or consider refactoring
    so that user-controlled data is not necessary.
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    references:
    - https://www.cvedetails.com/cve/CVE-2020-28168/
    - https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
    technology:
    - apollo
    - axios
  patterns:
  - pattern: const $RESPONSE = await axios.request($INNERARG,...)
  - pattern-inside: "Query: {\n  $METHOD(parent, args, context, info) {\n    ...\n
      \   $DATA = args.$DATAVAL\n    ...\n    async function $INNERFUNC(...,$INNERARG,...){\n
      \     ...\n    }\n    ...\n    return $INNERFUNC(...,$DATA,...)\n    }\n  }\n"
  severity: WARNING
- id: detect-child-process
  languages:
  - javascript
  - typescript
  message: Allowing spawning arbitrary programs or running shell processes with arbitrary
    arguments may end up in a command injection vulnerability. Try to avoid non-literal
    values for the command string. If it is not possible, then do not let running
    arbitrary commands, use a white list for inputs.
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $CMD
    - pattern-either:
      - pattern-inside: exec($CMD,...)
      - pattern-inside: execSync($CMD,...)
      - pattern-inside: spawn($CMD,...)
      - pattern-inside: spawnSync($CMD,...)
      - pattern-inside: $CP.exec($CMD,...)
      - pattern-inside: $CP.execSync($CMD,...)
      - pattern-inside: $CP.spawn($CMD,...)
      - pattern-inside: $CP.spawnSync($CMD,...)
    - pattern-either:
      - pattern-inside: 'require(''child_process'')

          ...

          '
      - pattern-inside: 'import ''child_process''

          ...

          '
  pattern-sources:
  - patterns:
    - pattern: $EVENT
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
  severity: WARNING
- id: knex-sqli
  languages:
  - javascript
  - typescript
  message: 'Detected SQL statement that is tainted by `$EVENT` object. This could
    lead to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, used parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `knex.raw(''SELECT $1 from
    table'', [userinput])`'
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://knexjs.org/#Builder-fromRaw
    - https://knexjs.org/#Builder-whereRaw
    technology:
    - aws-lambda
    - knex
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern-inside: $KNEX.fromRaw($QUERY, ...)
      - pattern-inside: $KNEX.whereRaw($QUERY, ...)
      - pattern-inside: $KNEX.raw($QUERY, ...)
    - pattern-either:
      - pattern-inside: 'require(''knex'')

          ...

          '
      - pattern-inside: 'import ''knex''

          ...

          '
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
    - pattern: $EVENT
  severity: WARNING
- id: mysql-sqli
  languages:
  - javascript
  - typescript
  message: 'Detected SQL statement that is tainted by `$EVENT` object. This could
    lead to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, used parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `connection.query(''SELECT
    $1 from table'', [userinput])`'
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://www.npmjs.com/package/mysql2
    technology:
    - aws-lambda
    - mysql
    - mysql2
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern-inside: $POOL.query($QUERY, ...)
      - pattern-inside: $POOL.execute($QUERY, ...)
    - pattern-either:
      - pattern-inside: 'require(''mysql'')

          ...

          '
      - pattern-inside: 'require(''mysql2'')

          ...

          '
      - pattern-inside: 'require(''mysql2/promise'')

          ...

          '
      - pattern-inside: 'import ''mysql''

          ...

          '
      - pattern-inside: 'import ''mysql2''

          ...

          '
      - pattern-inside: 'import ''mysql2/promise''

          ...

          '
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
    - pattern: $EVENT
  severity: WARNING
- id: pg-sqli
  languages:
  - javascript
  - typescript
  message: 'Detected SQL statement that is tainted by `$EVENT` object. This could
    lead to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, used parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `connection.query(''SELECT
    $1 from table'', [userinput])`'
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://node-postgres.com/features/queries
    technology:
    - aws-lambda
    - postgres
    - pg
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern-inside: $DB.query($QUERY, ...)
    - pattern-either:
      - pattern-inside: 'require(''pg'')

          ...

          '
      - pattern-inside: 'import ''pg''

          ...

          '
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
    - pattern: $EVENT
  severity: WARNING
- id: sequelize-sqli
  languages:
  - javascript
  - typescript
  message: 'Detected SQL statement that is tainted by `$EVENT` object. This could
    lead to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, used parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `sequelize.query(''SELECT
    * FROM projects WHERE status = ?'', { replacements: [''active''], type: QueryTypes.SELECT
    });`'
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://sequelize.org/master/manual/raw-queries.html
    technology:
    - aws-lambda
    - sequelize
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern-inside: $DB.query($QUERY, ...)
    - pattern-either:
      - pattern-inside: 'require(''sequelize'')

          ...

          '
      - pattern-inside: 'import ''sequelize''

          ...

          '
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
    - pattern: $EVENT
  severity: WARNING
- id: tainted-eval
  languages:
  - javascript
  - typescript
  message: The `eval()` function evaluates JavaScript code represented as a string.
    Executing JavaScript from a string is an enormous security risk. It is far too
    easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated
    content is not definable by external sources.
  metadata:
    category: security
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $CODE
    - pattern-either:
      - pattern: eval($CODE)
      - pattern: Function(...,$CODE)
      - pattern: new Function(...,$CODE)
  pattern-sources:
  - patterns:
    - pattern: $EVENT
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
  severity: WARNING
- id: tainted-html-response
  languages:
  - javascript
  - typescript
  message: Detected user input flowing into an HTML response. You may be accidentally
    bypassing secure methods of rendering HTML by manually constructing HTML and this
    could create a cross-site scripting vulnerability, which could let attackers steal
    sensitive user data.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017
    - A03:2021
    technology:
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $BODY
    - pattern-inside: '{..., headers: {..., ''Content-Type'': ''text/html'', ...},
        body: $BODY, ... }

        '
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
    - pattern: $EVENT
  severity: WARNING
- id: tainted-sql-string
  languages:
  - javascript
  - typescript
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    technology:
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '"$SQLSTR" + $EXPR

              '
          - pattern: '"$SQLSTR".concat(...)

              '
          - pattern: util.format($SQLSTR, ...)
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
      - patterns:
        - pattern: '`...${...}...`

            '
        - pattern-regex: '.*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*

            '
    - pattern-not-inside: 'console.$LOG(...)

        '
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
    - pattern: $EVENT
  severity: WARNING
- id: vm-runincontext-injection
  languages:
  - javascript
  - typescript
  message: The `vm` module enables compiling and running code within V8 Virtual Machine
    contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted
    code. If code passed to `vm` functions is controlled by user input it could result
    in command injection. Do not let user input in `vm` functions.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: 'require(''vm'');

          ...

          '
      - pattern-inside: 'import ''vm''

          ...

          '
    - pattern-either:
      - pattern: $VM.runInContext($X,...)
      - pattern: $VM.runInNewContext($X,...)
      - pattern: $VM.runInThisContext($X,...)
      - pattern: $VM.compileFunction($X,...)
      - pattern: new $VM.Script($X,...)
      - pattern: new $VM.SourceTextModule($X,...)
      - pattern: runInContext($X,...)
      - pattern: runInNewContext($X,...)
      - pattern: runInThisContext($X,...)
      - pattern: compileFunction($X,...)
      - pattern: new Script($X,...)
      - pattern: new SourceTextModule($X,...)
  pattern-sources:
  - patterns:
    - pattern: $EVENT
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
  severity: WARNING
- id: tofastproperties-code-execution
  languages:
  - javascript
  - typescript
  message: Potential arbitrary code execution, whatever is provided to `toFastProperties`
    is sent straight to eval()
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - bluebird
  patterns:
  - pattern-either:
    - pattern: $UTIL.toFastProperties(...)
    - pattern: toFastProperties(...)
  - pattern-not: '$UTIL.toFastProperties("...",...)

      '
  - pattern-not: 'toFastProperties("...",...)

      '
  - pattern-either:
    - pattern-inside: '$BB = require(''bluebird'');

        ...

        '
    - pattern-inside: 'import ''bluebird'';

        ...

        '
  severity: WARNING
- id: dom-based-xss
  languages:
  - javascript
  - typescript
  message: 'Detected possible DOM-based XSS. This occurs because a portion of the
    URL is being used to construct an element added directly to the page. For example,
    a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script>
    which would add the script to the page. Consider allowlisting appropriate values
    or using an approach which does not involve the URL.'
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/DOM_Based_XSS
    technology:
    - browser
  pattern-either:
  - pattern: document.write(<... document.location.$W ...>)
  - pattern: document.write(<... location.$W ...>)
  severity: ERROR
- id: eval-detected
  languages:
  - javascript
  - typescript
  message: Detected the use of eval(). eval() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this may
    be a code injection vulnerability. Ensure evaluated content is not definable by
    external sources.
  metadata:
    asvs:
      control_id: 5.2.4 Dynamic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing
      section: V5 Validation, Sanitization and Encoding
      version: '4'
    category: security
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    technology:
    - browser
  patterns:
  - pattern-not: eval("...")
  - pattern: eval(...)
  severity: WARNING
- id: insecure-document-method
  languages:
  - javascript
  - typescript
  message: User controlled data in methods like `innerHTML`, `outerHTML` or `document.write`
    is an anti-pattern that can lead to XSS vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    technology:
    - browser
  patterns:
  - pattern-either:
    - pattern: '$EL.innerHTML = $HTML;

        '
    - pattern: '$EL.outerHTML = $HTML;

        '
    - pattern: document.write(...)
  - pattern-not: '$EL.innerHTML = "...";

      '
  - pattern-not: '$EL.outerHTML = "...";

      '
  - pattern-not: document.write("...")
  severity: WARNING
- id: insecure-innerhtml
  languages:
  - javascript
  - typescript
  message: User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead
    to XSS vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    technology:
    - browser
  patterns:
  - pattern: '$EL.innerHTML = $HTML;

      '
  - pattern-not: '$EL.innerHTML = "...";

      '
  severity: WARNING
- id: insufficient-postmessage-origin-validation
  languages:
  - javascript
  - typescript
  message: No validation of origin is done by the addEventListener API. It may be
    possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site
    Scripting(XSS).
  metadata:
    category: security
    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp: 'A3: Sensitive Data Exposure'
    technology:
    - browser
  pattern-either:
  - patterns:
    - pattern: 'window.addEventListener(''message'', $FUNC, ...)

        '
    - metavariable-pattern:
        metavariable: $FUNC
        patterns:
        - pattern: 'function($OBJ) { ... }

            '
        - pattern-not: 'function($OBJ) { ... if (<... $OBJ.origin ...>) { ... } ...
            }

            '
  - patterns:
    - pattern-either:
      - pattern-inside: 'function $FNAME($OBJ) { $CONTEXT }

          ...

          '
      - pattern-inside: '$FNAME = (...) => { $CONTEXT }

          ...

          '
    - pattern: 'window.addEventListener(''message'', $FNAME,...)

        '
    - metavariable-pattern:
        metavariable: $CONTEXT
        patterns:
        - pattern-not: '... if (<... $OBJ.origin ...>) { ... } ...

            '
  severity: WARNING
- id: new-function-detected
  languages:
  - javascript
  - typescript
  message: Detected the use of new Function(), which can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this may
    be a code injection vulnerability. Ensure evaluated content is not definable by
    external sources.
  metadata:
    category: security
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    technology:
    - browser
  patterns:
  - pattern-not: '$FUNC = new Function(''...'');

      ...

      $FUNC();

      '
  - pattern: '$FUNC = new Function(...);

      ...

      $FUNC();

      '
  severity: WARNING
- id: js-open-redirect
  languages:
  - javascript
  - typescript
  message: Possible open redirect
  metadata:
    asvs:
      control_id: 5.5.1 Insecue Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
      section: V5 Validation, Sanitization and Encoding
      version: '4'
    category: security
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp: 'A1: Injection'
    technology:
    - browser
  patterns:
  - pattern-either:
    - pattern: 'window.location.replace($URL)

        '
    - pattern: 'location.replace($URL)

        '
    - pattern: 'window.location.href = $URL

        '
    - pattern: 'location.href = $URL

        '
  - pattern-not: 'window.location.href = "..."

      '
  - pattern-not: 'location.href = "..."

      '
  - pattern-not: 'location.replace("...")

      '
  - pattern-not: window.location.replace("...")
  severity: WARNING
- id: raw-html-concat
  languages:
  - javascript
  - typescript
  message: User controlled data in a HTML string may result in XSS
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/xss/
    technology:
    - browser
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $STRING + $EXPR
      - pattern-not: $STRING + "..."
      - metavariable-pattern:
          language: generic
          metavariable: $STRING
          patterns:
          - pattern: <$TAG ...
    - patterns:
      - pattern: $EXPR + $STRING
      - pattern-not: '"..." + $STRING'
      - metavariable-pattern:
          language: generic
          metavariable: $STRING
          patterns:
          - pattern: '... </$TAG'
    - patterns:
      - pattern: '[..., $STRING, ...].join(...)'
      - metavariable-pattern:
          language: generic
          metavariable: $STRING
          patterns:
          - pattern: <$TAG ...
    - patterns:
      - pattern: '[..., $STRING, ...].join(...)'
      - metavariable-pattern:
          language: generic
          metavariable: $STRING
          patterns:
          - pattern: '... </$TAG'
    - patterns:
      - pattern: $VAR += $STRING
      - metavariable-pattern:
          language: generic
          metavariable: $STRING
          patterns:
          - pattern: <$TAG ...
    - patterns:
      - pattern: $VAR += $STRING
      - metavariable-pattern:
          language: generic
          metavariable: $STRING
          patterns:
          - pattern: '... </$TAG'
  severity: WARNING
- id: raw-html-join
  languages:
  - javascript
  - typescript
  message: User controlled data in a HTML string may result in XSS
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/xss/
    technology:
    - browser
  patterns:
  - pattern-either:
    - patterns:
      - pattern: '[..., $STRING, ...].join(...)'
      - metavariable-pattern:
          language: generic
          metavariable: $STRING
          patterns:
          - pattern: <$TAG ...
    - patterns:
      - pattern: '[..., $STRING, ...].join(...)'
      - metavariable-pattern:
          language: generic
          metavariable: $STRING
          patterns:
          - pattern: '... </$TAG'
  severity: WARNING
- id: wildcard-postmessage-configuration
  languages:
  - javascript
  - typescript
  message: The target origin of the window.postMessage() API is set to "*". This could
    allow for information disclosure due to the possibility of any origin allowed
    to receive the message.
  metadata:
    category: security
    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp: 'A3: Sensitive Data Exposure'
    technology:
    - browser
  pattern: $OBJECT.postMessage(...,'*')
  severity: WARNING
- id: chrome-remote-interface-compilescript-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `compileScript` method it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - chrome-remote-interface
  patterns:
  - pattern-inside: 'require(''chrome-remote-interface'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = "...";

      ...

      '
  - pattern: '$RUNTIME.compileScript({expression: $INPUT},...)

      '
  - pattern-not: '$RUNTIME.compileScript({expression: "..."},...)'
  severity: WARNING
- id: chrome-remote-interface-evaluate-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `evaluate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - chrome-remote-interface
  patterns:
  - pattern-inside: 'require(''chrome-remote-interface'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = "...";

      ...

      '
  - pattern: '$RUNTIME.evaluate({expression: $INPUT},...)

      '
  - pattern-not: '$RUNTIME.evaluate({expression: "..."},...)'
  severity: WARNING
- id: chrome-remote-interface-navigate-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `navigate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - chrome-remote-interface
  patterns:
  - pattern-inside: 'require(''chrome-remote-interface'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = "...";

      ...

      '
  - pattern: '$PAGE.navigate({url: $INPUT},...)

      '
  - pattern-not: '$PAGE.navigate({url: "..."},...)'
  severity: WARNING
- id: chrome-remote-interface-printtopdf-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `printToPDF` method it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - chrome-remote-interface
  patterns:
  - pattern-inside: 'require(''chrome-remote-interface'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = "...";

      ...

      '
  - pattern-either:
    - pattern: '$RUNTIME.printToPDF({headerTemplate: $INPUT},...)

        '
    - pattern: '$RUNTIME.printToPDF({footerTemplate: $INPUT},...)

        '
  - pattern-not: '$RUNTIME.printToPDF({headerTemplate: "..."},...)

      '
  - pattern-not: '$RUNTIME.printToPDF({footerTemplate: "..."},...)'
  severity: WARNING
- id: chrome-remote-interface-setdocumentcontent-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `setDocumentContent` method it can
    result in Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - chrome-remote-interface
  patterns:
  - pattern-inside: 'require(''chrome-remote-interface'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = "...";

      ...

      '
  - pattern: '$PAGE.setDocumentContent({html: $INPUT},...)

      '
  - pattern-not: '$PAGE.setDocumentContent({html: "..."},...)'
  severity: WARNING
- id: deno-dangerous-run
  languages:
  - javascript
  - typescript
  message: Detected non-literal calls to Deno.run(). This could lead to a command
    injection vulnerability.
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    technology:
    - deno
  pattern-either:
  - patterns:
    - pattern: 'Deno.run({cmd: [$CMD,...]},...)

        '
    - pattern-not-inside: '$CMD = "..."

        ...

        '
    - pattern-not: 'Deno.run({cmd: ["...",...]},...)

        '
  - patterns:
    - pattern-either:
      - pattern: 'Deno.run({cmd: ["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...]},...)

          '
      - patterns:
        - pattern: 'Deno.run({cmd: [$CMD,"-c",$ARG,...]},...)

            '
        - pattern-inside: '$CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"

            ...

            '
    - pattern-not: 'Deno.run({cmd: [$CMD,"-c","...",...]},...)

        '
  severity: WARNING
- id: cors-misconfiguration
  languages:
  - js
  - typescript
  message: By letting user input control CORS parameters, there is a risk that software
    does not properly verify that the source of data or communication is valid. Use
    literal values for CORS settings.
  metadata:
    category: security
    cwe: 'CWE-346: Origin Validation Error'
    owasp: 'A1: Injection'
    technology:
    - express
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $RES.set($HEADER, ...)
      - pattern: $RES.header($HEADER, ...)
      - pattern: $RES.setHeader($HEADER, ...)
      - pattern: '$RES.set({$HEADER: ...}, ...)

          '
      - pattern: '$RES.writeHead($STATUS, {$HEADER: ...}, ...)

          '
    - metavariable-regex:
        metavariable: $HEADER
        regex: .*(Access-Control-Allow-Origin|access-control-allow-origin).*
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
    - pattern-either:
      - pattern: $REQ.$QUERY
      - pattern: $REQ.$BODY.$PARAM
  severity: WARNING
- id: express-data-exfiltration
  languages:
  - javascript
  - typescript
  message: Depending on the context, user control data in `Object.assign` can cause
    web response to include data that it should not have or can lead to a mass assignment
    vulnerability.
  metadata:
    category: security
    cwe: 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://nodesecroadmap.fyi/chapter-1/threat-EXF.html
    - https://en.wikipedia.org/wiki/Mass_assignment_vulnerability
    technology:
    - express
  mode: taint
  pattern-sinks:
  - pattern: Object.assign(...)
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
    - pattern-either:
      - pattern: $REQ
      - pattern: $REQ.$QUERY
      - pattern: $REQ.$BODY.$PARAM
  severity: WARNING
- id: express-expat-xxe
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach the XML Parser, as it
    can result in XML External or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    asvs:
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      section: V5 Validation, Sanitization and Encoding
      version: '4'
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    technology:
    - express
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-inside: 'require(''node-expat'');

        ...

        '
    - pattern-either:
      - pattern-inside: '$PARSER = new $EXPAT.Parser(...);

          ...

          '
      - pattern-inside: '$PARSER = new Parser(...);

          ...

          '
    - pattern-either:
      - pattern: $PARSER.parse(...)
      - pattern: $PARSER.write(...)
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
    - pattern-either:
      - pattern: $REQ.$QUERY
      - pattern: $REQ.$BODY.$PARAM
  severity: ERROR
- id: express-jwt-hardcoded-secret
  languages:
  - javascript
  - typescript
  message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables: process.env.SECRET)'
  metadata:
    asvs:
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - express
  patterns:
  - pattern-inside: '$JWT = require(''express-jwt'');

      ...

      '
  - pattern-either:
    - pattern: '$JWT(<... {secret: "..."} ...>,...);

        '
    - pattern: '$OPTS = <... {secret: "..."} ...>;

        ...

        $JWT($OPTS,...);

        '
  severity: ERROR
- id: express-phantom-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `phantom` methods it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - express
  patterns:
  - pattern-inside: 'require(''phantom'');

      ...

      '
  - pattern-inside: 'require(''express'');

      ...

      '
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern-either:
    - pattern: $PAGE.open(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.open(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.openUrl(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.openUrl(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateJavaScript(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateJavaScript(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.property("content",<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.property("content",<... $REQ.$BODY ...>,...)
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.open(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.open(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.setContent(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.setContent(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.openUrl(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.openUrl(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.evaluateJavaScript(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.evaluateJavaScript(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.property("content",<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.property("content",<... $INPUT ...>,...);'
  severity: ERROR
- id: express-puppeteer-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `puppeteer` methods it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - express
  patterns:
  - pattern-inside: 'require(''puppeteer'');

      ...

      '
  - pattern-inside: 'require(''express'');

      ...

      '
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern-either:
    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.goto(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluate(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluate(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluate($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluate($CODE,<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$BODY ...>,...)
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.goto(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.goto(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.setContent(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.setContent(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.evaluate(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.evaluate(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.evaluateHandle(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.evaluateHandle(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.evaluate($CODE,<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.evaluate($CODE,<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);

        '
  severity: ERROR
- id: express-sandbox-code-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach `sandbox`.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - express
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-inside: '$SANDBOX = require(''sandbox'');

        ...

        '
    - pattern-either:
      - patterns:
        - pattern-inside: '$S = new $SANDBOX(...);

            ...

            '
        - pattern: '$S.run(...)

            '
      - pattern: 'new $SANDBOX($OPTS).run(...)

          '
      - pattern: new $SANDBOX().run(...)
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
    - pattern-either:
      - pattern: $REQ.$QUERY
      - pattern: $REQ.$BODY.$PARAM
  severity: ERROR
- id: express-vm-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach `$VM`.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - express
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-inside: '$VM = require(''vm'');

        ...

        '
    - pattern-either:
      - pattern: '$VM.runInContext(...)

          '
      - pattern: '$VM.runInNewContext(...)

          '
      - pattern: '$VM.compileFunction(...)

          '
      - pattern: '$VM.runInThisContext(...)

          '
      - pattern: new $VM.Script(...)
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
    - pattern-either:
      - pattern: $REQ.$QUERY
      - pattern: $REQ.$BODY.$PARAM
  severity: ERROR
- id: express-vm2-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach `vm2`.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - express
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-inside: 'require(''vm2'')

        ...

        '
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: '$VM = new VM(...)

              ...

              '
          - pattern-inside: '$VM = new NodeVM(...)

              ...

              '
        - pattern: '$VM.run(...)

            '
      - pattern: 'new VM(...).run(...)

          '
      - pattern: 'new NodeVM(...).run(...)

          '
      - pattern: 'new VMScript(...)

          '
      - pattern: 'new VM(...)

          '
      - pattern: new NodeVM(...)
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
    - pattern-either:
      - pattern: $REQ.$QUERY
      - pattern: $REQ.$BODY.$PARAM
  severity: WARNING
- id: express-wkhtmltoimage-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `phantom` methods it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - express
  patterns:
  - pattern-inside: '$WK = require(''wkhtmltoimage'');

      ...

      '
  - pattern-inside: 'require(''express'');

      ...

      '
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern-either:
    - pattern: $WK.generate(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $WK.generate(<... $REQ.$BODY ...>,...)
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $WK.generate(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $WK.generate(<... $INPUT ...>,...);

        '
  severity: ERROR
- id: express-wkhtmltopdf-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `phantom` methods it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - express
  patterns:
  - pattern-inside: '$WK = require(''wkhtmltopdf'');

      ...

      '
  - pattern-inside: 'require(''express'');

      ...

      '
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern-either:
    - pattern: $WK(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $WK(<... $REQ.$BODY ...>,...)
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $WK(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $WK(<... $INPUT ...>,...);'
  severity: ERROR
- id: express-xml2json-xxe
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach the XML Parser, as it
    can result in XML External or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    asvs:
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      section: V5 Validation, Sanitization and Encoding
      version: '4'
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    technology:
    - express
  patterns:
  - pattern-inside: 'require(''xml2json'');

      ...

      '
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern-either:
    - pattern: $EXPAT.toJson(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $EXPAT.toJson(<... $REQ.$BODY ...>,...)
    - pattern: '$INPUT = <... $REQ.$QUERY.$FOO ...>;

        ...

        $EXPAT.toJson(<... $INPUT ...>,...);

        '
    - pattern: '$INPUT = <... $REQ.$BODY ...>;

        ...

        $EXPAT.toJson(<... $INPUT ...>,...);'
  severity: ERROR
- id: require-request
  languages:
  - javascript
  - typescript
  message: If an attacker controls the x in require(x) then they can cause code to
    load that was not intended to run on the server.
  metadata:
    category: security
    cwe: 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
    owasp: 'A1: Injection'
    source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern-either:
    - pattern: require(<... $REQ.$QUERY.$FOO ...>)
    - pattern: require(<... $REQ.$BODY ...>)
  severity: ERROR
- id: x-frame-options-misconfiguration
  languages:
  - js
  - typescript
  message: By letting user input control `X-Frame-Options` header, there is a risk
    that software does not properly verify whether or not a browser should be allowed
    to render a page in an `iframe`.
  metadata:
    category: security
    cwe: 'CWE-451: User Interface (UI) Misrepresentation of Critical Information'
    owasp: 'A1: Injection'
    technology:
    - express
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $RES.set($HEADER, ...)
      - pattern: $RES.header($HEADER, ...)
      - pattern: $RES.setHeader($HEADER, ...)
      - pattern: '$RES.set({$HEADER: ...}, ...)

          '
      - pattern: '$RES.writeHead($STATUS, {$HEADER: ...}, ...)

          '
    - metavariable-regex:
        metavariable: $HEADER
        regex: .*(X-Frame-Options|x-frame-options).*
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
    - pattern-either:
      - pattern: $REQ.$QUERY
      - pattern: $REQ.$BODY.$PARAM
  severity: WARNING
- id: express-cookie-session-default-name
  languages:
  - javascript
  - typescript
  message: 'Don’t use the default session cookie name Using the default session cookie
    name can open your app to attacks. The security issue posed is similar to X-Powered-By:
    a potential attacker can use it to fingerprint the server and target attacks accordingly.'
  metadata:
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: '$SESSION = require(''cookie-session'');

        ...

        '
    - pattern-inside: '$SESSION = require(''express-session'');

        ...

        '
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {name:...} ...>,...)
  - pattern-not-inside: '$OPTS = <... {name:...} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.name = ...;

      ...

      $SESSION($OPTS,...);

      '
  severity: WARNING
- id: express-cookie-session-no-secure
  languages:
  - javascript
  - typescript
  message: 'Default session middleware settings: `secure` not set. It ensures the
    browser only sends the cookie over HTTPS.'
  metadata:
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: '$SESSION = require(''cookie-session'');

        ...

        '
    - pattern-inside: '$SESSION = require(''express-session'');

        ...

        '
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{secure:true}} ...>,...)
  - pattern-not-inside: '$OPTS = <... {cookie:{secure:true}} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE = <... {secure:true} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie = <... {secure:true} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE.secure = true;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie.secure = true;

      ...

      $SESSION($OPTS,...);

      '
  severity: WARNING
- id: express-cookie-session-no-httponly
  languages:
  - javascript
  - typescript
  message: 'Default session middleware settings: `httpOnly` not set. It ensures the
    cookie is sent only over HTTP(S), not client JavaScript, helping to protect against
    cross-site scripting attacks.'
  metadata:
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: '$SESSION = require(''cookie-session'');

        ...

        '
    - pattern-inside: '$SESSION = require(''express-session'');

        ...

        '
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{httpOnly:true}} ...>,...)
  - pattern-not-inside: '$OPTS = <... {cookie:{httpOnly:true}} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE = <... {httpOnly:true} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie = <... {httpOnly:true} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE.httpOnly = true;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie.httpOnly = true;

      ...

      $SESSION($OPTS,...);

      '
  severity: WARNING
- id: express-cookie-session-no-domain
  languages:
  - javascript
  - typescript
  message: 'Default session middleware settings: `domain` not set. It indicates the
    domain of the cookie; use it to compare against the domain of the server in which
    the URL is being requested. If they match, then check the path attribute next.'
  metadata:
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: '$SESSION = require(''cookie-session'');

        ...

        '
    - pattern-inside: '$SESSION = require(''express-session'');

        ...

        '
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{domain:...}} ...>,...)
  - pattern-not-inside: '$OPTS = <... {cookie:{domain:...}} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE = <... {domain:...} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie = <... {domain:...} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE.domain = ...;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie.domain = ...;

      ...

      $SESSION($OPTS,...);

      '
  severity: WARNING
- id: express-cookie-session-no-path
  languages:
  - javascript
  - typescript
  message: 'Default session middleware settings: `path` not set. It indicates the
    path of the cookie; use it to compare against the request path. If this and domain
    match, then send the cookie in the request.'
  metadata:
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: '$SESSION = require(''cookie-session'');

        ...

        '
    - pattern-inside: '$SESSION = require(''express-session'');

        ...

        '
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{path:...}} ...>,...)
  - pattern-not-inside: '$OPTS = <... {cookie:{path:...}} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE = <... {path:...} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie = <... {path:...} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE.path = ...;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie.path = ...;

      ...

      $SESSION($OPTS,...);

      '
  severity: WARNING
- id: express-cookie-session-no-expires
  languages:
  - javascript
  - typescript
  message: 'Default session middleware settings: `expires` not set. Use it to set
    expiration date for persistent cookies.'
  metadata:
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: '$SESSION = require(''cookie-session'');

        ...

        '
    - pattern-inside: '$SESSION = require(''express-session'');

        ...

        '
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{expires:...}} ...>,...)
  - pattern-not-inside: '$OPTS = <... {cookie:{expires:...}} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE = <... {expires:...} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie = <... {expires:...} ...>;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $COOKIE.expires = ...;

      ...

      $SESSION($OPTS,...);

      '
  - pattern-not-inside: '$OPTS = ...;

      ...

      $OPTS.cookie.expires = ...;

      ...

      $SESSION($OPTS,...);'
  severity: WARNING
- id: express-jwt-not-revoked
  languages:
  - javascript
  - typescript
  message: No token revoking configured for `express-jwt`. A leaked token could still
    be used and unable to be revoked. Consider using function as the `isRevoked` option.
  metadata:
    asvs:
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md
    technology:
    - express
  patterns:
  - pattern-inside: '$JWT = require(''express-jwt'');

      ...

      '
  - pattern: $JWT(...)
  - pattern-not-inside: $JWT(<... {isRevoked:...} ...>,...)
  - pattern-not-inside: '$OPTS = <... {isRevoked:...} ...>;

      ...

      $JWT($OPTS,...);'
  severity: WARNING
- id: express-path-join-resolve-traversal
  languages:
  - javascript
  - typescript
  message: Possible writing outside of the destination, make sure that the target
    path is nested in the intended destination
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp: 'A5: Broken Access Control'
    technology:
    - express
  patterns:
  - pattern-inside: '$PATH = require(''path'');

      ...

      '
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern-either:
    - pattern: $PATH.join(...,<... $REQ.$BODY ...>,...)
    - pattern: $PATH.join(...,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: '$VAR = <... $REQ.$BODY ...>;

        ...

        $PATH.join(...,<... $VAR ...>,...);

        '
    - pattern: '$VAR = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PATH.join(...,<... $VAR ...>,...);

        '
    - pattern: $PATH.resolve(...,<... $REQ.$BODY ...>,...)
    - pattern: $PATH.resolve(...,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: '$VAR = <... $REQ.$BODY ...>;

        ...

        $PATH.resolve(...,<... $VAR ...>,...);

        '
    - pattern: '$VAR = <... $REQ.$QUERY.$FOO ...>;

        ...

        $PATH.resolve(...,<... $VAR ...>,...);'
  severity: WARNING
- id: express-xml2json-xxe-event
  languages:
  - javascript
  - typescript
  message: Xml Parser is used inside Request Event. Make sure that unverified user
    data can not reach the XML Parser, as it can result in XML External or Internal
    Entity (XXE) Processing vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    technology:
    - express
  patterns:
  - pattern-inside: 'require(''xml2json'');

      ...

      '
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern: $REQ.on('...', function(...) { ... $EXPAT.toJson($INPUT,...); ... })
  severity: WARNING
- id: unknown-value-in-redirect
  languages:
  - javascript
  - typescript
  message: It looks like '$UNK' is read from user input and it is used to as a redirect.
    Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.
  metadata:
    asvs:
      control_id: 5.5.1 Insecue Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
      section: V5 Validation, Sanitization and Encoding
      version: '4'
    category: security
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp: 'A1: Injection'
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: '$UNK = query.$B;

        ...

        '
    - pattern-inside: '$UNK = $A.query.$B;

        ...

        '
    - pattern-inside: '$UNK = req.$SOMETHING;

        ...

        '
  - pattern: $RES.redirect(..., <... $UNK ...>, ...)
  severity: WARNING
- id: remote-property-injection
  languages:
  - javascript
  - typescript
  message: Bracket object notation with user input is present, this might allow an
    attacker to access all properties of the object and even it's prototype. Use literal
    values for object properties.
  metadata:
    category: security
    cwe: 'CWE-1321: Improperly Controlled Modification of Object Prototype Attributes
      (''Prototype Pollution'')'
    owasp: 'A1: Injection'
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern: $OBJ[$REQ.$QUERY.$FOO] = ...
    - pattern: $OBJ[$REQ.$BODY] = ...
    - patterns:
      - pattern: $OBJ[$PARAM] = ...
      - pattern-either:
        - pattern-inside: '$PARAM = $REQ.$QUERY.$FOO

            ...

            '
        - pattern-inside: '$PARAM = $REQ.$BODY

            ...

            '
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  severity: ERROR
- id: res-render-injection
  languages:
  - javascript
  - typescript
  message: If an attacker controls the x in res.render(x) then they can cause code
    to load that was not intended to run on the server.
  metadata:
    category: security
    cwe: 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
    owasp: 'A1: Injection'
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: function ... ($REQ, $RES) {...}
    - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern-either:
    - pattern: $RES.render(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $RES.render(<... $REQ.$BODY ...>,...)
  severity: WARNING
- id: direct-response-write
  languages:
  - javascript
  - typescript
  message: Detected directly writing to a Response object. This bypasses any HTML
    escaping and may expose your app to a cross-site scripting (XSS) vulnerability.
    Instead, use 'resp.render()' to render safely escaped HTML.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    technology:
    - express
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES) {...}
    - pattern-inside: function $FUNC($REQ, $RES) {...}
    - pattern-inside: function ($REQ, $RES, $NEXT) {...}
    - pattern-inside: function $FUNC($REQ, $RES, $NEXT) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, $NEXT) {...}
    - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
    - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
  - pattern-not: $RES.write("...")
  - pattern-not: $RES.send("...")
  - pattern-either:
    - pattern: $RES.write(...)
    - pattern: $RES.send(...)
  severity: ERROR
- fix-regex:
    regex: <%-(.*?)%>
    replacement: <%=\1%>
  id: template-explicit-unescape
  languages:
  - regex
  message: Detected an explicit unescape in an EJS template, using '<%- ... %>' If
    external data can reach these locations, your application is exposed to a cross-site
    scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need
    escaping, ensure no external data can reach this location.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/
    technology:
    - express
  paths:
    include:
    - '*.ejs'
    - '*.html'
  pattern-regex: <%-((?!include).)*?%>
  severity: WARNING
- id: var-in-href
  languages:
  - regex
  message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: href=''/<%= link %>''.
    You may also consider setting the Content Security Policy (CSP) header.'
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    - https://github.com/pugjs/pug/issues/2952
    technology:
    - express
  paths:
    include:
    - '*.ejs'
    - '*.html'
  pattern-regex: <a.*href\s*=[^>]*?[^\/&=]<%.*?%>.*?>
  severity: WARNING
- id: var-in-script-src
  languages:
  - generic
  message: Detected a template variable used as the 'src' in a script tag. Although
    template variables are HTML escaped, HTML escaping does not always prevent malicious
    URLs from being injected and could results in a cross-site scripting (XSS) vulnerability.
    Prefer not to dynamically generate the 'src' attribute and use static URLs instead.
    If you must do this, carefully check URLs against an allowlist and be sure to
    URL-encode the result.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    technology:
    - express
  paths:
    include:
    - '*.ejs'
    - '*.html'
  patterns:
  - pattern-inside: <script ...>
  - pattern-either:
    - pattern-inside: src = '...'
    - pattern-inside: src = "..."
  - pattern: <% ... >
  severity: WARNING
- id: var-in-script-tag
  languages:
  - generic
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    technology:
    - express
  paths:
    include:
    - '*.ejs'
    - '*.html'
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern-not-inside: <script ... $ATTR = "..." ...>
  - pattern-not-inside: <script ... $ATTR = '...' ...>
  - pattern: <% ... >
  severity: WARNING
- id: escape-function-overwrite
  languages:
  - javascript
  - typescript
  message: 'The Mustache escape function is being overwritten. This could bypass HTML
    escaping safety measures built into the rendering engine, exposing your application
    to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use
    the triple brace operator in your template: ''{{{ ... }}}''.'
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://github.com/janl/mustache.js/#variables
    technology:
    - express
  pattern-either:
  - pattern: Mustache.escape = ...
  - patterns:
    - pattern-inside: '$MUSTACHE = require("mustache");

        ...

        '
    - pattern: $MUSTACHE.escape = ...
  severity: WARNING
- id: template-explicit-unescape
  languages:
  - regex
  message: Detected an explicit unescape in a Mustache template, using triple braces
    '{{{...}}}' or ampersand '&'. If external data can reach these locations, your
    application is exposed to a cross-site scripting (XSS) vulnerability. If you must
    do this, ensure no external data can reach this location.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://github.com/janl/mustache.js/#variables
    technology:
    - express
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  pattern-either:
  - pattern-regex: '{{{((?!include).)*?}}}'
  - pattern-regex: '{{[^}&]*&[^}&]*}}'
  severity: WARNING
- id: var-in-href
  languages:
  - regex
  message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: href=''/{{link}}''.
    You may also consider setting the Content Security Policy (CSP) header.'
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    - https://github.com/pugjs/pug/issues/2952
    technology:
    - express
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  pattern-regex: <a.*href\s*=(\s|['"])*?{{.*?}}.*
  severity: WARNING
- id: var-in-script-tag
  languages:
  - generic
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    technology:
    - express
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern: '{{ ... }}'
  severity: WARNING
- id: template-and-attributes
  languages:
  - regex
  message: Detected a unescaped variables using '&attributes'. If external data can
    reach these locations, your application is exposed to a cross-site scripting (XSS)
    vulnerability. If you must do this, ensure no external data can reach this location.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://pugjs.org/language/attributes.html#attributes
    technology:
    - express
  paths:
    include:
    - '*.pug'
  pattern-regex: .*&attributes.*
  severity: WARNING
- id: template-explicit-unescape
  languages:
  - regex
  message: Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'.
    If external data can reach these locations, your application is exposed to a cross-site
    scripting (XSS) vulnerability. If you must do this, ensure no external data can
    reach this location.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://pugjs.org/language/code.html#unescaped-buffered-code
    - https://pugjs.org/language/attributes.html#unescaped-attributes
    technology:
    - express
  paths:
    include:
    - '*.pug'
  pattern-either:
  - pattern-regex: \w.*(!=)[^=].*
  - pattern-regex: '!{.*?}'
  severity: WARNING
- id: var-in-href
  languages:
  - regex
  message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: a(href=''/''+url). You
    may also consider setting the Content Security Policy (CSP) header.'
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://github.com/pugjs/pug/issues/2952
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    technology:
    - express
  paths:
    include:
    - '*.pug'
  pattern-regex: a\(.*href=[^'"].*\)
  severity: WARNING
- id: var-in-script-tag
  languages:
  - regex
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    technology:
    - express
  paths:
    include:
    - '*.pug'
  pattern-either:
  - pattern-regex: script\s*=[A-Za-z0-9]+
  - pattern-regex: script\s*=.*["']\s*\+.*
  - pattern-regex: script\s*=[^'"]+\+.*
  - pattern-regex: script\(.*?\)\s*=\s*[A-Za-z0-9]+
  - pattern-regex: script\(.*?\)\s*=\s*.*["']\s*\+.*
  - pattern-regex: script\(.*?\)\s*=\s*[^'"]+\+.*
  severity: WARNING
- id: raw-html-format
  languages:
  - javascript
  - typescript
  message: User data flows into the host portion of this manually-constructed URL.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data such as cookies or authorization information sent with this request.
    They could also probe internal servers or other resources that the server runnig
    this code can access. (This is called server-side request forgery, or SSRF.) Do
    not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode
    the correct host.
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A07:2017
    - A03:2021
    technology:
    - express
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '"$HTMLSTR" + $EXPR'
          - pattern: '"$HTMLSTR".concat(...)'
          - pattern: util.format($HTMLSTR, ...)
        - metavariable-pattern:
            language: generic
            metavariable: $HTMLSTR
            pattern: <$TAG ...
      - patterns:
        - pattern: '`...`

            '
        - pattern-regex: '.*<\w+.*

            '
  pattern-sources:
  - patterns:
    - pattern-inside: 'require(''express'');

        ...

        '
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern: $REQ
  severity: WARNING
- id: tainted-sql-string
  languages:
  - javascript
  - typescript
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')

      '
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    technology:
    - express
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '"$SQLSTR" + $EXPR

              '
          - pattern: '"$SQLSTR".concat(...)

              '
          - pattern: util.format($SQLSTR, ...)
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
      - patterns:
        - pattern: '`...${...}...`

            '
        - pattern-regex: '.*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*

            '
  pattern-sources:
  - patterns:
    - pattern-inside: 'require(''express'');

        ...

        '
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
    - pattern: $REQ
  severity: WARNING
- id: insecure-createnodesfrommarkup
  languages:
  - javascript
  - typescript
  message: User controlled data in a `createNodesFromMarkup` is an anti-pattern that
    can lead to XSS vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    technology:
    - fbjs
  patterns:
  - pattern-either:
    - pattern: createNodesFromMarkup(...)
    - pattern: $X.createNodesFromMarkup(...)
  - pattern-not: createNodesFromMarkup("...",...)
  - pattern-not: $X.createNodesFromMarkup("...",...)
  severity: WARNING
- id: grpc-nodejs-insecure-connection
  languages:
  - javascript
  - typescript
  message: Found an insecure gRPC connection. This creates a connection without encryption
    to a gRPC client/server. A malicious attacker could tamper with the gRPC message,
    which could compromise the machine.
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    technology:
    - grpc
  pattern-either:
  - pattern: 'require(''grpc'');

      ...

      $GRPC($ADDR,...,$CREDENTIALS.createInsecure(),...);

      '
  - pattern: 'require(''grpc'');

      ...

      $CREDS = <... $CREDENTIALS.createInsecure() ...>;

      ...

      $GRPC($ADDR,...,$CREDS,...);'
  severity: ERROR
- id: jwt-exposed-credentials
  languages:
  - javascript
  - typescript
  message: Password is exposed through JWT token payload. This is not encrypted and
    the password could be compromised. Do not store passwords in JWT tokens.
  metadata:
    asvs:
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    references:
    - https://cwe.mitre.org/data/definitions/522.html
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jose
    - jwt
  pattern-either:
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $T = JWT.sign({password:...},...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $T = JWT.sign({password:...},...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $P = {password:...};

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $P = {password:...};

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P = {password:...};

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P = {password:...};

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P.password = ...;

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P.password = ...;

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $P = Object.assign(...,{password:...},...);

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $P = Object.assign(...,{password:...},...);

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P = Object.assign(...,{password:...},...);

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P = Object.assign(...,{password:...},...);

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $T = JWT.sign(Object.assign(...,{password:...},...),...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $T = JWT.sign(Object.assign(...,{password:...},...),...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $T = JWT.sign({$U:{password:...}},...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $T = JWT.sign({$U:{password:...}},...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $P = {$U:{password:...}};

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $P = {$U:{password:...}};

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P = {$U:{password:...}};

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P = {$U:{password:...}};

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P.$U.password = ...;

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P.$U.password = ...;

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $P = Object.assign(...,{$U:{password:...}},...);

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $P = Object.assign(...,{$U:{password:...}},...);

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P = Object.assign(...,{$U:{password:...}},...);

      ...

      var $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $P = Object.assign(...,{$U:{password:...}},...);

      ...

      $T = JWT.sign($P,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $T = JWT.sign(Object.assign(...,{$U:{password:...}},...),...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      $T = JWT.sign(Object.assign(...,{$U:{password:...}},...),...);

      '
  severity: ERROR
- id: hardcoded-jwt-secret
  languages:
  - javascript
  - typescript
  message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables: process.env.SECRET)'
  metadata:
    asvs:
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jose
    - jwt
  pattern-either:
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      JWT.verify($P, "...", ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $T = JWT.sign($P, "...", ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $T = JWT.verify($P, "...", ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      JWT.verify($P, JWK.asKey("..."), ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $KEY = JWK.asKey("...");

      ...

      JWT.verify($P, $KEY, ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $T = JWT.sign($P, JWK.asKey("..."), ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $T = JWT.verify($P, JWK.asKey("..."), ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $KEY = JWK.asKey("...");

      ...

      var $T = JWT.sign($P, $KEY, ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $KEY = JWK.asKey("...");

      ...

      var $T = JWT.verify($P, $KEY, ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $SECRET = "...";

      ...

      JWT.verify($P, $SECRET, ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $SECRET = "...";

      ...

      var $T = JWT.sign($P, $SECRET, ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWT } = $JOSE;

      ...

      var $SECRET = "...";

      ...

      var $T = JWT.verify($P, $SECRET, ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $SECRET = "...";

      ...

      JWT.verify($P, JWK.asKey($SECRET), ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $SECRET = "...";

      ...

      var $KEY = JWK.asKey($SECRET);

      ...

      JWT.verify($P, $KEY, ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $SECRET = "...";

      ...

      var $T = JWT.sign($P, JWK.asKey($SECRET), ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $SECRET = "...";

      ...

      var $KEY = JWK.asKey($SECRET);

      ...

      var $T = JWT.sign($P, $KEY, ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $SECRET = "...";

      ...

      var $T = JWT.verify($P, JWK.asKey($SECRET), ...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $SECRET = "...";

      ...

      var $KEY = JWK.asKey($SECRET);

      ...

      var $T = JWT.verify($P, $KEY, ...);

      '
  severity: ERROR
- id: jwt-none-alg
  languages:
  - javascript
  - typescript
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    asvs:
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jose
    - jwt
  pattern-either:
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      var $T = JWT.verify($P, JWK.None,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      $T = JWT.verify($P, JWK.None,...);

      '
  - pattern: 'var $JOSE = require("jose");

      ...

      var { JWK, JWT } = $JOSE;

      ...

      JWT.verify($P, JWK.None,...);

      '
  severity: ERROR
- id: jose-exposed-data
  languages:
  - javascript
  - typescript
  message: The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive
    information is not exposed through JWT token payload.
  metadata:
    asvs:
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jose
    - jwt
  patterns:
  - pattern-inside: 'require(''jose'');

      ...

      '
  - pattern-either:
    - patterns:
      - pattern-inside: function (...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
    - patterns:
      - pattern-inside: function $F(...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
  severity: WARNING
- id: jquery-insecure-method
  languages:
  - javascript
  - typescript
  message: User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that
    can lead to XSS vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/xss/
    - https://bugs.jquery.com/ticket/9521
    technology:
    - jquery
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: $.$METHOD($VAR,...)
      - pattern: $(...).$METHOD($VAR,...)
      - pattern: jQuery.$METHOD($VAR,...)
      - pattern: jQuery(...).$METHOD($VAR,...)
    - pattern-not: $.$METHOD("...",...)
    - pattern-not: $(...).$METHOD("...",...)
    - pattern-not: jQuery.$METHOD("...",...)
    - pattern-not: jQuery(...).$METHOD("...",...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(html|append|prepend|wrap|wrapInner|wrapAll|before|after|globalEval|getScript)$
  - patterns:
    - pattern-either:
      - pattern: $(...).$METHOD($VAR,...)
      - pattern: jQuery(...).$METHOD($VAR,...)
    - pattern-not: $("...",...).$METHOD(...)
    - pattern-not: jQuery("...",...).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(appendTo|insertAfter|insertBefore|prependTo)$
  severity: WARNING
- id: jquery-insecure-selector
  languages:
  - javascript
  - typescript
  message: User controlled data in a `$(...)` is an anti-pattern that can lead to
    XSS vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/xss/
    - https://bugs.jquery.com/ticket/9521
    technology:
    - jquery
  patterns:
  - pattern-either:
    - pattern: '$(<... window ...>)

        '
    - pattern: '$(<... location ...>)

        '
    - pattern: '$X = <... window ...>;

        ...

        $(<... $X ...>);

        '
    - pattern: '$X = <... location ...>;

        ...

        $(<... $X ...>);

        '
    - patterns:
      - pattern-either:
        - pattern-inside: "function $FUNC(..., $Y, ...) {\n  ...\n}\n"
        - pattern-inside: "function (..., $Y, ...) {\n  ...\n}\n"
        - pattern-inside: "function $FUNC(...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n
            \ ...\n}\n"
        - pattern-inside: "function (...,$Z,...) {\n  ...\n  $Y = <... $Z ...>;\n
            \ ...\n}\n"
      - pattern-either:
        - pattern: '$(<... $Y ...>)

            '
        - pattern: '$("..." + (<... $Y ...>))

            '
        - pattern: '$((<... $Y ...>) + "...")

            '
      - pattern-not-inside: "$JQUERY.each(function($INDEX, $Y) {\n  ...\n})\n"
  - pattern-not: '$(window)

      '
  - pattern-not: '$(document)

      '
  - pattern-not: '$(this)

      '
  severity: WARNING
- id: prohibit-jquery-html
  languages:
  - javascript
  - typescript
  message: JQuery's `.html()` is susceptible to Cross Site Scripting (XSS) attacks.  If
    you're just passing text, consider `.text()` instead. Otherwise, use a  function
    that escapes HTML such as edX's `HtmlUtils.setHtml()`.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss.html#javascript-concat-html
    - https://stackoverflow.com/questions/8318581/html-vs-innerhtml-jquery-javascript-xss-attacks
    - https://api.jquery.com/text/#text-text
    technology:
    - jquery
  patterns:
  - pattern: '$X.html(...)

      '
  - pattern-not: '$X.html("...",...)

      '
  severity: WARNING
- id: jwt-exposed-credentials
  languages:
  - javascript
  - typescript
  message: Password is exposed through JWT token payload. This is not encrypted and
    the password could be compromised. Do not store passwords in JWT tokens.
  metadata:
    asvs:
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    references:
    - https://cwe.mitre.org/data/definitions/522.html
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jwt
  patterns:
  - pattern-inside: '$JWT = require("jsonwebtoken");

      ...

      '
  - pattern-either:
    - pattern: '$JWT.sign({password:...},...);

        '
    - pattern: '$P = {password:...};

        ...

        $JWT.sign($P,...);

        '
    - pattern: '$P.password = ...;

        ...

        $JWT.sign($P,...);

        '
    - pattern: '$P = Object.assign(...,{password:...},...);

        ...

        $JWT.sign($P,...);

        '
    - pattern: '$JWT.sign(Object.assign(...,{password:...},...),...);

        '
    - pattern: '$JWT.sign({$U:{password:...}},...);

        '
    - pattern: '$P = {$U:{password:...}};

        ...

        $JWT.sign($P,...);

        '
    - pattern: '$P.$U.password = ...;

        ...

        $JWT.sign($P,...);

        '
    - pattern: '$P = Object.assign(...,{$U:{password:...}},...);

        ...

        $JWT.sign($P,...);

        '
    - pattern: '$JWT.sign(Object.assign(...,{$U:{password:...}},...),...);

        '
  severity: ERROR
- id: hardcoded-jwt-secret
  languages:
  - javascript
  - typescript
  message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables: process.env.SECRET)'
  metadata:
    asvs:
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jwt
  patterns:
  - pattern-inside: '$JWT = require("jsonwebtoken");

      ...

      '
  - pattern-either:
    - pattern: '$JWT.sign($P, "...", ...);

        '
    - pattern: '$JWT.verify($P, "...", ...);

        '
    - patterns:
      - pattern-inside: '$SECRET = "...";

          ...

          '
      - pattern-either:
        - pattern: $JWT.sign($P, $SECRET, ...)
        - pattern: $JWT.verify($P, $SECRET, ...)
  severity: ERROR
- id: jwt-none-alg
  languages:
  - javascript
  - typescript
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    asvs:
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jwt
  patterns:
  - pattern-inside: '$JWT = require("jsonwebtoken");

      ...

      '
  - pattern: $JWT.verify($P, $X, {algorithms:[...,'none',...]},...)
  severity: ERROR
- id: jwt-decode-without-verify
  languages:
  - javascript
  - typescript
  message: Detected the decoding of a JWT token without a verify step. JWT tokens
    must be verified before use, otherwise the token's integrity is unknown. This
    means a malicious actor could forge a JWT token with any claims. Call '.verify()'
    before using the token.
  metadata:
    asvs:
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jwt
  patterns:
  - pattern-inside: '$JWT = require(''jsonwebtoken'');

      ...

      '
  - pattern-not-inside: '...

      $JWT.verify($TOKEN, ...)

      ...

      '
  - pattern-not-inside: '...

      if (<... $JWT.verify($TOKEN, ...) ...>) { ... }

      ...

      '
  - pattern: $JWT.decode($TOKEN, ...)
  severity: WARNING
- id: jwt-exposed-data
  languages:
  - javascript
  - typescript
  message: The object is passed strictly to jsonwebtoken.sign(...) Make sure that
    sensitive information is not exposed through JWT token payload.
  metadata:
    asvs:
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jwt
  patterns:
  - pattern-inside: '$JWT = require(''jsonwebtoken'');

      ...

      '
  - pattern-either:
    - pattern-inside: function (...,$INPUT,...) {...}
    - pattern-inside: function $F(...,$INPUT,...) {...}
  - pattern: $JWT.sign($INPUT,...)
  severity: WARNING
- id: assigned-undefined
  languages:
  - javascript
  - typescript
  message: '`undefined` is not a reserved keyword in Javascript, so this is "valid"
    Javascript but highly confusing and likely to result in bugs.'
  metadata:
    category: best-practice
    technology:
    - javascript
  pattern-either:
  - pattern: undefined = $X;
  - pattern: var undefined = $X;
  - pattern: let undefined = $X;
  - pattern: const undefined = $X;
  severity: WARNING
- id: lazy-load-module
  languages:
  - js
  - ts
  message: Lazy loading can complicate code bundling if care is not taken, also `require`s
    are run synchronously by Node.js. If they are called from within a function, it
    may block other requests from being handled at a more critical time. The best
    practice is to `require` modules at the beginning of each file, before and outside
    of any functions.
  metadata:
    category: best-practice
    references:
    - https://nodesecroadmap.fyi/chapter-2/dynamism.html
    - https://github.com/goldbergyoni/nodebestpractices#-38-require-modules-first-not-inside-functions
    technology:
    - javascript
  patterns:
  - pattern: require(...)
  - pattern-inside: "function $NAME(...) {\n    ...\n}\n"
  severity: WARNING
- id: javascript-alert
  languages:
  - javascript
  - typescript
  message: found alert() call; should this be in production code?
  metadata:
    category: best-practice
    technology:
    - javascript
  pattern-either:
  - pattern: alert()
  - pattern: alert($X)
  severity: WARNING
- id: javascript-debugger
  languages:
  - javascript
  - typescript
  message: found debugger call; should this be in production code?
  metadata:
    category: best-practice
    technology:
    - javascript
  pattern: debugger;
  severity: WARNING
- id: javascript-confirm
  languages:
  - javascript
  - typescript
  message: found conform() call; should this be in production code?
  metadata:
    category: best-practice
    technology:
    - javascript
  pattern: confirm(...)
  severity: WARNING
- id: javascript-prompt
  languages:
  - javascript
  - typescript
  message: found prompt() call; should this be in production code?
  metadata:
    category: best-practice
    technology:
    - javascript
  pattern-either:
  - pattern: prompt()
  - pattern: prompt($X)
  - pattern: prompt($X, $Y)
  severity: WARNING
- id: zlib-async-loop
  languages:
  - javascript
  - typescript
  message: Creating and using a large number of zlib objects simultaneously can cause
    significant memory fragmentation. It is strongly recommended that the results
    of compression operations be cached or made synchronous to avoid duplication of
    effort.
  metadata:
    category: best-practice
    references:
    - https://nodejs.org/api/zlib.html#zlib_threadpool_usage_and_performance_considerations
    technology:
    - javascript
  patterns:
  - pattern-either:
    - pattern-inside: "for (...) {\n    ...\n}\n"
    - pattern-inside: "while (...) {\n    ...\n}\n"
    - pattern-inside: "do {\n    ...\n} while (...)\n"
    - pattern-inside: '$SMTH.forEach(...)

        '
    - pattern-inside: '$SMTH.map(...)

        '
    - pattern-inside: '$SMTH.reduce(...)

        '
    - pattern-inside: '$SMTH.reduceRight(...)

        '
  - pattern: zlib.$METHOD(...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^.+$(?<!Sync)
  severity: WARNING
- id: missing-template-string-indicator
  languages:
  - js
  - ts
  message: This looks like a JavaScript template string. Are you missing a '$' in
    front of '{...}'?
  metadata:
    category: correctness
    technology:
    - js
  patterns:
  - pattern-inside: '`...`

      '
  - pattern: $STR
  - metavariable-regex:
      metavariable: $STR
      regex: .*[^$]+{[^{}]*}.*
  severity: ERROR
- id: no-replaceall
  languages:
  - javascript
  - typescript
  message: The string method replaceAll is not supported in all versions of javascript,
    and is not supported by older browser versions. Consider using replace() with
    a regex as the first argument instead like mystring.replace(/bad/g, "good") instead
    of mystring.replaceAll("bad", "good") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)
  metadata:
    category: correctness
    technology:
    - javascript
  pattern: $STRING.replaceAll("...",$NEW)
  severity: WARNING
- id: useless-assignment
  languages:
  - javascript
  - typescript
  message: '`$X` is assigned twice; the first assignment is useless'
  metadata:
    category: correctness
    technology:
    - javascript
  patterns:
  - pattern: '$X = $Y;

      $X = $Z;

      '
  - pattern-not: '$X = $Y;

      $X = <... $X ...>;

      '
  severity: WARNING
- id: eqeq-is-bad
  languages:
  - javascript
  - typescript
  message: Detected a useless comparison operation `$X == $X` or `$X != $X`. This
    operation is always true. If testing for floating point NaN, use `math.isnan`,
    or `cmath.isnan` if the number is complex.
  metadata:
    category: correctness
    technology:
    - javascript
  patterns:
  - pattern-not-inside: assert(...)
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  severity: ERROR
- id: detect-buffer-noassert
  languages:
  - javascript
  - typescript
  message: Detected usage of noassert in Buffer API, which allows the offset the be
    beyond the end of the buffer. This could result in writing or reading beyond the
    end of the buffer.
  metadata:
    category: security
    cwe: 'CWE-119: Improper Restriction of Operations within the Bounds of a Memory
      Buffer'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js
    technology:
    - javascript
  patterns:
  - pattern: $OBJ.$API(..., true)
  - metavariable-regex:
      metavariable: $API
      regex: (read|write)(U?Int8|(U?Int(16|32)|Float|Double)(LE|BE))
  severity: WARNING
- id: detect-child-process
  languages:
  - javascript
  - typescript
  message: Detected non-literal calls to $EXEC(). This could lead to a command injection
    vulnerability.
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
    technology:
    - javascript
  patterns:
  - pattern-either:
    - pattern: exec($CMD,...)
    - pattern: execSync($CMD,...)
    - pattern: spawn($CMD,...)
    - pattern: spawnSync($CMD,...)
  - pattern-not-inside: $EXEC("...",...)
  - pattern-not-inside: $EXEC(["...",...],...)
  - pattern-not-inside: '$CMD = "..."

      ...

      '
  - pattern-not-inside: '$CMD = ["...",...]

      ...

      '
  severity: WARNING
- id: detect-disable-mustache-escape
  languages:
  - javascript
  - typescript
  message: Markup escaping disabled. This can be used with some template engines to
    escape disabling of HTML entities, which can lead to XSS attacks.
  metadata:
    category: security
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js
    technology:
    - mustache
  pattern: $OBJ.escapeMarkup = false
  severity: WARNING
- id: detect-eval-with-expression
  languages:
  - javascript
  - typescript
  message: Detected eval(variable), which could allow a malicious actor to run arbitrary
    code.
  metadata:
    category: security
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js
    technology:
    - javascript
  patterns:
  - pattern-either:
    - pattern: eval($OBJ)
    - pattern: window.eval($OBJ)
    - pattern: Function(...,$OBJ)
    - pattern: new Function(...,$OBJ)
  - pattern-not: eval("...")
  - pattern-not: window.eval("...")
  - pattern-not: Function(...,"...")
  - pattern-not: new Function(...,"...")
  - pattern-not-inside: '$OBJ = "..."

      ...

      $SOMETHING(..., $OBJ, ...)

      '
  severity: WARNING
- id: detect-insecure-websocket
  languages:
  - regex
  message: Insecure WebSocket Detected. WebSocket Secure (wss) should be used for
    all WebSocket connections.
  metadata:
    asvs:
      control_id: 13.5.1 Insecure WebSocket
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x21-V13-API.md#v135-websocket-security-requirements
      section: 'V13: API and Web Service Verification Requirements'
      version: '4'
    category: security
    technology:
    - regex
  pattern-regex: ws:\/\/
  severity: ERROR
- id: detect-no-csrf-before-method-override
  languages:
  - javascript
  - typescript
  message: Detected use of express.csrf() middleware before express.methodOverride().
    This can allow GET requests (which are not checked by csrf) to turn into POST
    requests later.
  metadata:
    category: security
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    references:
    - https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-no-csrf-before-method-override.js
    technology:
    - javascript
  pattern: 'express.csrf();

    ...

    express.methodOverride();

    '
  severity: WARNING
- id: detect-non-literal-require
  languages:
  - javascript
  - typescript
  message: Detected the use of require(variable). Calling require with a non-literal
    argument might allow an attacker to load an run arbitrary code, or access arbitrary
    files.
  metadata:
    category: security
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js
    technology:
    - javascript
  patterns:
  - pattern: require($OBJ)
  - pattern-not: require('...')
  severity: WARNING
- id: detect-pseudoRandomBytes
  languages:
  - javascript
  - typescript
  message: Detected usage of crypto.pseudoRandomBytes, which does not produce secure
    random numbers.
  metadata:
    asvs:
      control_id: 6.3.1 Insecure Randomness
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v63-random-values
      section: 'V6: Stored Cryptography Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    owasp: 'A9: Using Components with Known Vulnerabilities'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-pseudoRandomBytes.js
    technology:
    - javascript
  pattern: crypto.pseudoRandomBytes
  severity: WARNING
- id: insecure-object-assign
  languages:
  - javascript
  - typescript
  message: Depending on the context, user control data in `Object.assign` can cause
    web response to include data that it should not have or can lead to a mass assignment
    vulnerability.
  metadata:
    category: security
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp: 'A1: Injection'
    references:
    - https://nodesecroadmap.fyi/chapter-1/threat-EXF.html
    - https://en.wikipedia.org/wiki/Mass_assignment_vulnerability
    technology:
    - javascript
  mode: taint
  pattern-sinks:
  - pattern: Object.assign(...)
  pattern-sources:
  - patterns:
    - pattern: JSON.parse(...)
    - pattern-not: JSON.parse("...",...)
  severity: WARNING
- id: spawn-git-clone
  languages:
  - javascript
  - typescript
  message: Git allows shell commands to be specified in ext URLs for remote repositories.
    For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command
    to try to connect to a remote repository. Make sure that the URL is not controlled
    by external input.
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    technology:
    - git
  patterns:
  - pattern-either:
    - pattern: spawn('git', ['clone',...,$F])
    - pattern: $X.spawn('git', ['clone',...,$F])
    - pattern: spawn('git', ['clone',...,$P,$F])
    - pattern: $X.spawn('git', ['clone',...,$P,$F])
  - pattern-not: spawn('git', ['clone',...,"..."])
  - pattern-not: $X.spawn('git', ['clone',...,"..."])
  - pattern-not: spawn('git', ['clone',...,"...","..."])
  - pattern-not: $X.spawn('git', ['clone',...,"...","..."])
  severity: ERROR
- id: code-string-concat
  languages:
  - javascript
  - typescript
  message: User controlled data in eval() or similar functions may result in Code
    Injection
  metadata:
    category: security
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    technology:
    - node.js
  pattern-either:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $STRING + $EXPR
        - pattern-not: $STRING + "..."
      - patterns:
        - pattern: $EXPR + $STRING
        - pattern-not: '"..." + $STRING'
      - patterns:
        - pattern: '[..., $STRING, ...].join(...)'
      - patterns:
        - pattern: $VAR += $STRING
    - metavariable-regex:
        metavariable: $STRING
        regex: .*(function|Function|eval|\([^\(\)]*\)\s*=>).*
  - patterns:
    - pattern-inside: '`...${...}...`

        '
    - pattern-regex: function|Function|eval|\([^\(\)]*\)\s*=>
  severity: WARNING
- id: dangerous-spawn-shell
  languages:
  - javascript
  - typescript
  message: Detected non-literal calls to $EXEC(). This could lead to a command injection
    vulnerability.
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
    technology:
    - javascript
  patterns:
  - pattern-either:
    - pattern: spawn(...)
    - pattern: spawnSync(...)
    - pattern: $CP.spawn(...)
    - pattern: $CP.spawnSync(...)
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: '$EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["-c", $ARG, ...],...)

            '
        - patterns:
          - pattern: $EXEC($CMD,["-c", $ARG, ...],...)
          - pattern-inside: '$CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"

              ...

              '
      - pattern-not: '$EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["-c", "...", ...],...)

          '
    - patterns:
      - pattern-either:
        - pattern: '$EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",[$ARG, ...],...)

            '
        - patterns:
          - pattern: $EXEC($CMD,[$ARG, ...],...)
          - pattern-inside: '$CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"

              ...

              '
      - pattern-not: '$EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["...", ...],...)

          '
  - pattern-not-inside: '$ARG = "..."

      ...

      '
  - pattern-either:
    - pattern-inside: 'require(''child_process'')

        ...

        '
    - pattern-inside: 'import ''child_process''

        ...

        '
  severity: WARNING
- id: detect-bracket-object-injection
  languages:
  - javascript
  - typescript
  message: Detected user input used in bracket notation accessor. This could lead
    to object injection through $FIELD, which could grant access to every property
    available in the object and therefore sensitive information. Instead, avoid the
    use of user input in property name fields or create a whitelist of allowed input.
  metadata:
    category: security
    technology:
    - javascript
  patterns:
  - pattern: '$VAR = $OBJ[$FIELD];

      '
  - pattern-not: '$VAR = $OBJ[($FIELD : float)];

      '
  - pattern-not: '$VAR = $OBJ["..."];

      '
  - pattern-not-inside: '$FIELD = ...;

      ...

      '
  severity: WARNING
- id: detect-non-literal-fs-filename
  languages:
  - typescript
  - javascript
  message: A variable is present in the filename argument of fs calls, this might
    allow an attacker to access anything on your system.
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-fs-filename.js
    technology:
    - typescript
  patterns:
  - pattern-inside: '$X = require(''fs'')

      ...

      '
  - pattern-not: $FS.$METHOD("...", ...)
  - pattern-either:
    - pattern: $FS.appendFile($FILE,...)
    - pattern: $FS.appendFileSync($FILE,...)
    - pattern: $FS.chmod($FILE,...)
    - pattern: $FS.chmodSync($FILE,...)
    - pattern: $FS.chown($FILE,...)
    - pattern: $FS.chownSync($FILE,...)
    - pattern: $FS.createReadStream($FILE,...)
    - pattern: $FS.createWriteStream($FILE,...)
    - pattern: $FS.exists($FILE,...)
    - pattern: $FS.existsSync($FILE,...)
    - pattern: $FS.lchmod($FILE,...)
    - pattern: $FS.lchmodSync($FILE,...)
    - pattern: $FS.lchown($FILE,...)
    - pattern: $FS.lchownSync($FILE,...)
    - pattern: $FS.link($FILE,...)
    - pattern: $FS.linkSync($FILE,...)
    - pattern: $FS.lstat($FILE,...)
    - pattern: $FS.lstatSync($FILE,...)
    - pattern: $FS.mkdir($FILE,...)
    - pattern: $FS.mkdirSync($FILE,...)
    - pattern: $FS.open($FILE,...)
    - pattern: $FS.openSync($FILE,...)
    - pattern: $FS.readdir($FILE,...)
    - pattern: $FS.readdirSync($FILE,...)
    - pattern: $FS.readFile($FILE,...)
    - pattern: $FS.readFileSync($FILE,...)
    - pattern: $FS.readlink($FILE,...)
    - pattern: $FS.readlinkSync($FILE,...)
    - pattern: $FS.realpath($FILE,...)
    - pattern: $FS.realpathSync($FILE,...)
    - pattern: $FS.rename($FILE,...)
    - pattern: $FS.renameSync($FILE,...)
    - pattern: $FS.rmdir($FILE,...)
    - pattern: $FS.rmdirSync($FILE,...)
    - pattern: $FS.stat($FILE,...)
    - pattern: $FS.statSync($FILE,...)
    - pattern: $FS.symlink($FILE,...)
    - pattern: $FS.symlinkSync($FILE,...)
    - pattern: $FS.truncate($FILE,...)
    - pattern: $FS.truncateSync($FILE,...)
    - pattern: $FS.unlink($FILE,...)
    - pattern: $FS.unlinkSync($FILE,...)
    - pattern: $FS.unwatchFile($FILE,...)
    - pattern: $FS.utimes($FILE,...)
    - pattern: $FS.utimesSync($FILE,...)
    - pattern: $FS.watch($FILE,...)
    - pattern: $FS.watchFile($FILE,...)
    - pattern: $FS.writeFile($FILE,...)
    - pattern: $FS.writeFileSync($FILE,...)
  severity: WARNING
- id: detect-non-literal-regexp
  languages:
  - javascript
  - typescript
  message: RegExp() called with a variable, this might allow an attacker to DOS your
    application with a long-running regular expression.
  metadata:
    category: security
    cwe: 'CWE-185: Incorrect Regular Expression'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js
    technology:
    - javascript
  patterns:
  - pattern-either:
    - pattern: new RegExp($ARG, ...)
    - pattern: RegExp($ARG, ...)
  - pattern-not: RegExp("...", ...)
  - pattern-not: new RegExp("...", ...)
  - pattern-not: RegExp(/.../, ...)
  - pattern-not: new RegExp(/.../, ...)
  severity: WARNING
- id: incomplete-sanitization
  languages:
  - js
  - ts
  message: '`$STR.replace` method will only replace the first occurence when used
    with a string argument ($CHAR). If this method is used for escaping of dangerous
    data then there is a possibility for a bypass. Try to use sanitization library
    instead or use a Regex with a global flag.'
  metadata:
    category: security
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    technology:
    - javascript
  patterns:
  - pattern: '$STR.replace(($CHAR: string), ...)

      '
  - metavariable-regex:
      metavariable: $CHAR
      regex: ^[\"\']([\'\"\<\>\*\|\{\}\[\]\%\$]{1}|\\n|\\r|\\t|\\&)[\"\']$
  severity: WARNING
- id: md5-used-as-password
  languages:
  - javascript
  message: It looks like MD5 is used as a password hash. MD5 is not considered a secure
    password hash because it can be cracked by an attacker in a short amount of time.
    Use a suitable password hashing function such as bcrypt. You can use the `bcrypt`
    node.js package.
  metadata:
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A02:2017 - Broken Authentication
    - A02:2021 - Cryptographic Failures
    references:
    - https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html
    - https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords
    - https://github.com/returntocorp/semgrep-rules/issues/1609
    - https://www.npmjs.com/package/bcrypt
    technology:
    - crypto
    - md5
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $FUNCTION(...);
    - metavariable-regex:
        metavariable: $FUNCTION
        regex: (?i)(.*password.*)
  pattern-sources:
  - pattern: $CRYPTO.createHash("md5")
  severity: WARNING
- id: non-constant-sql-query
  languages:
  - javascript
  - typescript
  message: Non-constant SQL query detected. Ensure this is not controlled by external
    data, otherwise this is a SQL injection.
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    technology:
    - sequelize
  patterns:
  - pattern: $DB.sequelize.query(...)
  - pattern-not: $DB.sequelize.query("...")
  severity: INFO
- id: spawn-shell-true
  languages:
  - javascript
  - typescript
  message: 'Found ''$SPAWN'' with ''{shell: $SHELL}''. This is dangerous because this
    call will spawn the command using a shell process. Doing so propagates current
    shell settings and variables, which makes it much easier for a malicious actor
    to execute commands. Use ''{shell: false}'' instead.'
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-either:
    - pattern: 'spawn(...,{shell: $SHELL})

        '
    - pattern: 'spawnSync(...,{shell: $SHELL})

        '
    - pattern: '$CP.spawn(...,{shell: $SHELL})

        '
    - pattern: '$CP.spawnSync(...,{shell: $SHELL})

        '
  - pattern-not: 'spawn(...,{shell: false})

      '
  - pattern-not: 'spawnSync(...,{shell: false})

      '
  - pattern-not: '$CP.spawn(...,{shell: false})

      '
  - pattern-not: '$CP.spawnSync(...,{shell: false})

      '
  severity: WARNING
- id: unknown-value-with-script-tag
  languages:
  - javascript
  - typescript
  message: Cannot determine what '$UNK' is and it is used with a '<script>' tag. This
    could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally
    controlled, or sanitize this data.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://www.developsec.com/2017/11/09/xss-in-a-script-tag/
    - https://github.com/juice-shop/juice-shop/blob/master/routes/videoHandler.ts#L64
    technology:
    - javascript
  patterns:
  - pattern-inside: '$UNK = $ANYFUNC(...);

      ...

      $OTHERFUNC(..., <... $UNK ...>, ...);

      '
  - pattern: $OTHERFUNC(..., <... "=~/.*<script.*/" ...>, ...)
  severity: WARNING
- id: unsafe-dynamic-method
  languages:
  - js
  - ts
  message: Using non-static data to retrieve and run functions from the object is
    dangerous. If the data is user-controlled, it may allow executing arbitrary code.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-either:
    - pattern: $OBJ[$X](...)
    - pattern: '$Y = $OBJ[$X]

        ...

        $Y(...)

        '
  - metavariable-pattern:
      metavariable: $X
      patterns:
      - pattern-not: '"..."

          '
      - pattern-not: '($X: float)

          '
  - pattern-not-inside: 'for (...) {...}

      '
  - pattern-not-inside: '$SMTH.forEach(...)

      '
  - pattern-not-inside: '$SMTH.map(...)

      '
  - pattern-not-inside: '$SMTH.reduce(...)

      '
  - pattern-not-inside: '$SMTH.reduceRight(...)

      '
  - pattern-not-inside: "if (<... $OBJ.hasOwnProperty(...) ...>) {\n  ...\n}\n...\n"
  severity: WARNING
- id: unsafe-formatstring
  languages:
  - javascript
  - typescript
  message: Detected string concatenation with a non-literal variable in a util.format
    / console.log function. If an attacker injects a format specifier in the string,
    it will forge the log message. Try to use constant values for the format string.
  metadata:
    category: security
    cwe: 'CWE-134: Use of Externally-Controlled Format String'
    owasp: 'A1: Injection'
    technology:
    - javascript
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $STR
    - pattern-either:
      - pattern-inside: 'console.$LOG($STR,$PARAM,...)

          '
      - patterns:
        - pattern-inside: '$UTIL = require(''util'')

            ...

            '
        - pattern-inside: '$UTIL.format($STR,$PARAM,...)

            '
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $X + $Y
      - pattern: $X.concat($Y)
      - pattern: '`...${...}...`

          '
    - pattern-not: '"..." + "..."

        '
    - pattern-not: '$X.concat("...")

        '
  severity: WARNING
- id: vm-runincontext-context-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach vm.runInContext.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$VM = require(''vm'');

      ...

      '
  - pattern-either:
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $VM.runInContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $VM.runInContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  $VM.runInContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n
        \ $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $VM.runInContext($CODE,<...
        $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function $FUNC(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT
        ...>;\n  ...\n  $VM.runInContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function $FUNC(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  $VM.runInContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function $FUNC(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <...
        $INPUT ...>};\n  ...\n  $VM.runInContext($CODE,<... $CONTEXT ...>,...);\n
        \ ...\n}\n"
    - pattern: "function $FUNC(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n
        \ ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $VM.runInContext($CODE,<...
        $CONTEXT ...>,...);\n  ...\n}\n"
  severity: WARNING
- id: vm-runinnewcontext-context-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach vm.runInNewContext.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$VM = require(''vm'');

      ...

      '
  - pattern-either:
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VM.runInNewContext($CODE,<...
        $INPUT ...>,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n
        \ $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $VM.runInNewContext($CODE,<...
        $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function $FUNC(...,$INPUT,...) {\n  ...\n  $VM.runInNewContext($CODE,<...
        $INPUT ...>,...);\n  ...\n}\n"
    - pattern: "function $FUNC(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT
        ...>;\n  ...\n  $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function $FUNC(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);\n  ...\n}\n"
    - pattern: "function $FUNC(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <...
        $INPUT ...>};\n  ...\n  $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);\n
        \ ...\n}\n"
    - pattern: "function $FUNC(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n
        \ ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $VM.runInNewContext($CODE,<...
        $CONTEXT ...>,...);\n  ...\n}\n"
  severity: WARNING
- id: vm-compilefunction-context-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach vm.compileFunction.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$VM = require(''vm'');

      ...

      '
  - pattern-either:
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext:
        <... $INPUT ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT
        ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT
        ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT
        ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n
        \ $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext:
        <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $OPTS = {parsingContext: <...
        $INPUT ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,$OPTS,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $OPTS = {parsingContext: <... $CONTEXT ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,$OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $OPTS = {parsingContext: <... $CONTEXT ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,$OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n
        \ $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {parsingContext: <...
        $CONTEXT ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,$OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext:
        <... $INPUT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT
        ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT
        ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT
        ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n
        \ ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,{parsingContext:
        <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $OPTS = {parsingContext: <...
        $INPUT ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,$OPTS,...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $OPTS = {parsingContext: <... $CONTEXT ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,$OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $OPTS = {parsingContext: <... $CONTEXT ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,$OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n
        \ ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {parsingContext:
        <... $CONTEXT ...>};\n  ...\n  $VM.compileFunction($CODE,$PARAMS,$OPTS,...);\n
        \ ...\n}\n"
  severity: WARNING
- id: vm-script-code-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach vm.Script.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$VM = require(''vm'');

      ...

      '
  - pattern: new $VM.Script($CODE,...)
  - pattern-not: new $VM.Script("...",...)
  - pattern-not-inside: '$CODE = "...";

      ...'
  severity: WARNING
- id: vm-sourcetextmodule-code-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach vm.SourceTextModule.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$VM = require(''vm'');

      ...

      '
  - pattern: new $VM.SourceTextModule($CODE,...)
  - pattern-not: new $VM.SourceTextModule("...",...)
  - pattern-not-inside: '$CODE = "...";

      ...'
  severity: WARNING
- id: vm-runincontext-code-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach vm.runInContext.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$VM = require(''vm'');

      ...

      '
  - pattern: $VM.runInContext($CODE,...)
  - pattern-not: $VM.runInContext("...",...)
  - pattern-not-inside: '$CODE = "...";

      ...

      '
  severity: WARNING
- id: vm-runinnewcontext-code-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach vm.runInNewContext.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$VM = require(''vm'');

      ...

      '
  - pattern: $VM.runInNewContext($CODE,...)
  - pattern-not: $VM.runInNewContext("...",...)
  - pattern-not-inside: '$CODE = "...";

      ...

      '
  severity: WARNING
- id: vm-runinthiscontext-code-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach vm.runInThisContext.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$VM = require(''vm'');

      ...

      '
  - pattern: $VM.runInThisContext($CODE,...)
  - pattern-not: $VM.runInThisContext("...",...)
  - pattern-not-inside: '$CODE = "...";

      ...

      '
  severity: WARNING
- id: vm-compilefunction-code-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach vm.compileFunction.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$VM = require(''vm'');

      ...

      '
  - pattern: $VM.compileFunction($CODE,...)
  - pattern-not: $VM.compileFunction("...",...)
  - pattern-not-inside: '$CODE = "...";

      ...'
  severity: WARNING
- id: path-join-resolve-traversal
  languages:
  - javascript
  - typescript
  message: Possible writing outside of the destination, make sure that the target
    path is nested in the intended destination
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp: 'A5: Broken Access Control'
    technology:
    - javascript
  patterns:
  - pattern-inside: '$PATH = require(''path'');

      ...

      '
  - pattern-either:
    - pattern-inside: function $FUNC(...,$INPUT,...) {...}
    - pattern-inside: function (...,$INPUT,...) {...}
  - pattern-either:
    - pattern: $PATH.join(...,<... $INPUT ...>,...)
    - pattern: $PATH.join(...,<... $INPUT.$FOO ...>,...)
    - pattern: $PATH.join(...,<... $INPUT.$FOO.$BAR ...>,...)
    - pattern: '$VAR = <... $INPUT ...>;

        ...

        $PATH.join(...,<... $VAR ...>,...);

        '
    - pattern: '$VAR = <... $INPUT.$FOO ...>;

        ...

        $PATH.join(...,<... $VAR ...>,...);

        '
    - pattern: '$VAR = <... $INPUT.$FOO.$BAR ...>;

        ...

        $PATH.join(...,<... $VAR ...>,...);

        '
    - pattern: $PATH.resolve(...,<... $INPUT ...>,...)
    - pattern: $PATH.resolve(...,<... $INPUT.$FOO ...>,...)
    - pattern: $PATH.resolve(...,<... $INPUT.$FOO.$BAR ...>,...)
    - pattern: '$VAR = <... $INPUT ...>;

        ...

        $PATH.resolve(...,<... $VAR ...>,...);

        '
    - pattern: '$VAR = <... $INPUT.$FOO ...>;

        ...

        $PATH.resolve(...,<... $VAR ...>,...);

        '
    - pattern: '$VAR = <... $INPUT.$FOO.$BAR ...>;

        ...

        $PATH.resolve(...,<... $VAR ...>,...);

        '
  severity: WARNING
- id: prototype-pollution-assignment
  languages:
  - javascript
  - typescript
  message: 'Possibility of prototype polluting assignment detected. By adding or modifying
    attributes of an object prototype, it is possible to create attributes that exist
    on every object, or replace critical attributes with malicious ones. This can
    be problematic if the software depends on existence or non-existence of certain
    attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty,
    toString or valueOf). Possible mitigations might be: freezing the object prototype,
    using an object without prototypes (via Object.create(null) ), blocking modifications
    of attributes that resolve to object prototype, using Map instead of object.'
  metadata:
    category: security
    cwe: 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf
    technology:
    - javascript
  patterns:
  - pattern: '$X[$B] = ...

      '
  - pattern-inside: '$X = $SMTH[$A]

      ...

      '
  - pattern-not-inside: "if (<...'constructor' ...>) {\n  ...\n}\n"
  - pattern-not-inside: "if (<...'__proto__' ...>) {\n  ...\n}\n"
  - pattern-not-inside: 'for(var $B = $S; ...; ...) {...}

      '
  - pattern-not-inside: 'for($B = $S; ...; ...) {...}

      '
  - pattern-not-inside: '$X.forEach(function $NAME($OBJ, $B,...) {...})

      '
  - metavariable-pattern:
      metavariable: $A
      patterns:
      - pattern-not: '"..."'
      - pattern-not: '`...${...}...`

          '
      - pattern-not: '($A: float)

          '
  - metavariable-pattern:
      metavariable: $B
      patterns:
      - pattern-not: '"..."'
      - pattern-not: '`...${...}...`

          '
      - pattern-not: '($B: float)

          '
  severity: WARNING
- id: prototype-pollution-function
  languages:
  - javascript
  - typescript
  message: 'Possibility of prototype polluting function detected. By adding or modifying
    attributes of an object prototype, it is possible to create attributes that exist
    on every object, or replace critical attributes with malicious ones. This can
    be problematic if the software depends on existence or non-existence of certain
    attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty,
    toString or valueOf). Possible mitigations might be: freezing the object prototype,
    using an object without prototypes (via Object.create(null) ), blocking modifications
    of attributes that resolve to object prototype, using Map instead of object.'
  metadata:
    category: security
    cwe: 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf
    technology:
    - javascript
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern: "if (<...'constructor' ...>) {\n  ...\n}\n...\n"
    - pattern: "if (<...'__proto__' ...>) {\n  ...\n}\n...\n"
  pattern-sinks:
  - patterns:
    - pattern: $TARGET[$A] = ...
    - pattern-not: $TARGET["..."] = ...
    - pattern-not: '$TARGET[($A: float)] = ...

        '
    - pattern-not-inside: "if (<... $TARGET.hasOwnProperty($A) ...>) {\n  ...\n}\n"
    - pattern-either:
      - pattern-inside: "$NAME = function $F(...) {\n  ...\n  $NAME(...)\n  ...\n}\n"
      - pattern-inside: "function $NAME(...) {\n  ...\n  $NAME(...)\n  ...\n}\n"
      - pattern-inside: "function $NAME(...) {\n  ...\n  $THIS.$NAME(...)\n  ...\n}\n"
      - pattern-inside: "function $NAME(...) {\n  ...\n  $NAME.call(...)\n  ...\n}\n"
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern: $SOURCE[$B]
      - pattern-not: $SOURCE["..."]
      - pattern-not: $SOURCE[`...${...}...`]
      - pattern-not: '$SOURCE[($B: float)]

          '
    - pattern: function $X(..., $SOURCE, ...) { ... }
  severity: WARNING
- id: prototype-pollution-loop
  languages:
  - typescript
  - javascript
  message: 'Possibility of prototype polluting function detected. By adding or modifying
    attributes of an object prototype, it is possible to create attributes that exist
    on every object, or replace critical attributes with malicious ones. This can
    be problematic if the software depends on existence or non-existence of certain
    attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty,
    toString or valueOf). Possible mitigations might be: freezing the object prototype,
    using an object without prototypes (via Object.create(null) ), blocking modifications
    of attributes that resolve to object prototype, using Map instead of object.'
  metadata:
    category: security
    cwe: 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf
    technology:
    - typescript
  patterns:
  - pattern-either:
    - pattern: '$SMTH = $SMTH[$A]

        '
    - pattern: '$SMTH = $SMTH[$A] = ...

        '
    - pattern: '$SMTH = $SMTH[$A] && $Z

        '
    - pattern: '$SMTH = $SMTH[$A] || $Z

        '
  - pattern-either:
    - pattern-inside: "for(...) {\n  ...\n}\n"
    - pattern-inside: "while(...) {\n  ...\n}\n"
    - pattern-inside: "$X.forEach(function $NAME(...) {\n  ...\n})\n"
  - pattern-not-inside: 'for(var $A = $S; ...; ...) {...}

      '
  - pattern-not-inside: 'for($A = $S; ...; ...) {...}

      '
  - pattern-not-inside: '$X.forEach(function $NAME($OBJ, $A,...) {...})

      '
  - metavariable-pattern:
      metavariable: $A
      patterns:
      - pattern-not: '"..."'
      - pattern-not: '`...${...}...`

          '
      - pattern-not: '($A: float)

          '
  severity: WARNING
- id: node-knex-sqli
  languages:
  - javascript
  - typescript
  message: 'Detected tainted SQL statement. This could lead to SQL injection if the
    variable is user-controlled and not properly sanitized. In order to prevent SQL
    injection, used parameterized queries or prepared statements instead. You can
    use parameterized statements like so: `knex.raw(''SELECT $1 from table'', [userinput])`'
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://knexjs.org/#Builder-fromRaw
    - https://knexjs.org/#Builder-whereRaw
    technology:
    - knex
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern-inside: $KNEX.fromRaw($QUERY, ...)
      - pattern-inside: $KNEX.whereRaw($QUERY, ...)
      - pattern-inside: $KNEX.raw($QUERY, ...)
    - pattern-either:
      - pattern-inside: 'require(''knex'')

          ...

          '
      - pattern-inside: 'import ''knex''

          ...

          '
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $X + $Y
      - pattern: $X.concat($Y)
      - pattern: '`...${...}...`

          '
      - patterns:
        - pattern: '[..., $X, ...].join(...)

            '
        - metavariable-pattern:
            metavariable: $X
            patterns:
            - pattern-not: '"..."

                '
    - pattern-not: '"..." + "..."

        '
    - pattern-not: '$X.concat("...")

        '
  severity: WARNING
- id: node-mssql-sqli
  languages:
  - js
  - typescript
  message: 'Detected string concatenation with a non-literal variable in a `mssql`
    JS SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, used parameterized
    queries or prepared statements instead. You can use parameterized statements like
    so: `$REQ.input(''USER_ID'', mssql.Int, id);`'
  metadata:
    category: security
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    references:
    - https://node-postgres.com/features/queries
    technology:
    - mssql
  patterns:
  - pattern-inside: 'require(''mssql'')

      ...

      '
  - pattern-inside: '$REQ = $POOL.request(...)

      ...

      '
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: '$REQ.query($QUERY,...)

            '
        - pattern: '$REQ.query($QUERY, ...).$INTFUNC(...)

            '
      - pattern-either:
        - pattern-inside: '$QUERY = $X + $Y

            ...

            '
        - pattern-inside: '$QUERY += $X

            ...

            '
        - pattern-inside: '$QUERY = $X.concat($Y)

            ...

            '
        - pattern-inside: '$QUERY = `...${...}...`

            ...

            '
      - pattern-not-inside: '$QUERY += "..."

          ...

          '
      - pattern-not-inside: '$QUERY = "..." + "..."

          ...

          '
      - pattern-not-inside: '$QUERY = $X.concat("...")

          ...

          '
    - pattern: $REQ.query($X + $Y, ...)
    - pattern: $REQ.query($X.concat($Y), ...)
    - pattern: $REQ.query(`...${...}...`, ...)
  - pattern-not: $REQ.query("..." + "...", ...)
  - pattern-not: $REQ.query($X.concat("..."), ...)
  severity: WARNING
- id: node-mysql-sqli
  languages:
  - javascript
  - typescript
  message: 'Detected tainted SQL statement. This could lead to SQL injection if the
    variable is user-controlled and not properly sanitized. In order to prevent SQL
    injection, used parameterized queries or prepared statements instead. You can
    use parameterized statements like so: `connection.query(''SELECT $1 from table'',
    [userinput])`'
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://www.npmjs.com/package/mysql2
    technology:
    - mysql
    - mysql2
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern-inside: $POOL.query($QUERY, ...)
      - pattern-inside: $POOL.execute($QUERY, ...)
    - pattern-either:
      - pattern-inside: 'require(''mysql'')

          ...

          '
      - pattern-inside: 'require(''mysql2'')

          ...

          '
      - pattern-inside: 'require(''mysql2/promise'')

          ...

          '
      - pattern-inside: 'import ''mysql''

          ...

          '
      - pattern-inside: 'import ''mysql2''

          ...

          '
      - pattern-inside: 'import ''mysql2/promise''

          ...

          '
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $X + $Y
      - pattern: $X.concat($Y)
      - pattern: '`...${...}...`

          '
      - patterns:
        - pattern: '[..., $X, ...].join(...)

            '
        - metavariable-pattern:
            metavariable: $X
            patterns:
            - pattern-not: '"..."

                '
    - pattern-not: '"..." + "..."

        '
    - pattern-not: '$X.concat("...")

        '
  severity: WARNING
- id: node-postgres-sqli
  languages:
  - js
  - typescript
  message: 'Detected string concatenation with a non-literal variable in a node-postgres
    JS SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, used parameterized
    queries or prepared statements instead. You can use parameterized statements like
    so: `client.query(''SELECT $1 from table'', [userinput])`'
  metadata:
    category: security
    references:
    - https://node-postgres.com/features/queries
    technology:
    - node-postgres
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: '$DB.query(...,$QUERY,...)

            '
        - pattern: '$DB.query(..., $QUERY, ...).$INTFUNC(...)

            '
      - pattern-either:
        - pattern-inside: '$QUERY = $X + $Y

            ...

            '
        - pattern-inside: '$QUERY += $X

            ...

            '
        - pattern-inside: '$QUERY = $X.concat($Y)

            ...

            '
      - pattern-not-inside: '$QUERY += "..."

          ...

          '
      - pattern-not-inside: '$QUERY = "..." + "..."

          ...

          '
      - pattern-not-inside: '$QUERY = $X.concat("...")

          ...

          '
    - pattern: $DB.query(..., $X + $Y, ...)
    - pattern: $DB.query(..., $X.concat($Y), ...)
  - pattern-either:
    - pattern-inside: 'const { $CLIENT } = require(''pg'')

        ...

        $DB = new $CLIENT(...)

        ...

        '
    - pattern-inside: "const { $POOL } = require('pg')\n...\nconst $NEWPOOL = new
        $POOL(...)\n...\n$NEWPOOL.connect((..., $DB, ...) => {\n    ...\n})\n"
  - pattern-not: $DB.query(..., "..." + "...", ...)
  - pattern-not: $DB.query(..., $X.concat("..."), ...)
  severity: WARNING
- id: monaco-hover-htmlsupport
  languages:
  - typescript
  - javascript
  message: If user input reaches `HoverProvider` while `supportHml` is set to `true`
    it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically
    generated input.
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://github.com/microsoft/monaco-editor/issues/801
    technology:
    - monaco
    - monaco-editor
  patterns:
  - pattern-either:
    - pattern-inside: 'import "monaco-editor"

        ...

        '
    - pattern-inside: 'require("monaco-editor")

        ...

        '
  - pattern-either:
    - pattern: '{value: $VAL, supportHtml: true}

        '
    - pattern: '{value: $VAL, isTrusted: true}

        '
  - pattern-inside: '{range: $R, contents: [...]}

      '
  - pattern-not: '{..., value: "...", ...}

      '
  severity: WARNING
- id: expat-xxe
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the XML Parser it can result in XML External
    or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    technology:
    - node-expat
  patterns:
  - pattern-either:
    - pattern: 'var $EXPAT = require(''node-expat'');

        ...

        new $EXPAT.Parser(...);

        ...

        $PARSER.parse(...);

        '
    - pattern: 'var $EXPAT = require(''node-expat'');

        ...

        new $EXPAT.Parser(...);

        ...

        $PARSER.write(...);

        '
    - pattern: 'require(''node-expat'');

        ...

        new Parser(...);

        ...

        $PARSER.parse(...);

        '
    - pattern: 'require(''node-expat'');

        ...

        new Parser(...);

        ...

        $PARSER.write(...);

        '
  - pattern-not: 'var $EXPAT = require(''node-expat'');

      ...

      new $EXPAT.Parser(...);

      ...

      $PARSER.parse("...");

      '
  - pattern-not: 'var $EXPAT = require(''node-expat'');

      ...

      new $EXPAT.Parser(...);

      ...

      $PARSER.write("...");

      '
  - pattern-not: 'require(''node-expat'');

      ...

      new Parser(...);

      ...

      $PARSER.parse("...");

      '
  - pattern-not: 'require(''node-expat'');

      ...

      new Parser(...);

      ...

      $PARSER.write("...");

      '
  - pattern-not: '$X = "...";

      ...

      $PARSER.parse($X);

      '
  - pattern-not: '$X = "...";

      ...

      $PARSER.write($X);'
  severity: WARNING
- id: hardcoded-passport-secret
  languages:
  - javascript
  - typescript
  message: 'Hardcoded secret used for Passport Strategy. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables: process.env.SECRET)'
  metadata:
    asvs:
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      section: 'V3: Session Management Verification Requirements'
      version: '4'
    category: security
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jwt
  pattern-either:
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      new $F({clientSecret: "..."}, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      var $P = {};

      ...

      $P.clientSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      var $P = {clientSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      var $S = "...";

      ...

      new $F({clientSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      $P = {};

      ...

      $P.clientSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      $P = {clientSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      $S = "...";

      ...

      new $F({clientSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      $S = "...";

      ...

      var $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      $S = "...";

      ...

      var $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      $S = "...";

      ...

      $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-auth0").Strategy;

      ...

      $S = "...";

      ...

      $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      new $F({clientSecret: "..."}, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      var $P = {};

      ...

      $P.clientSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      var $P = {clientSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      var $S = "...";

      ...

      new $F({clientSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      $P = {};

      ...

      $P.clientSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      $P = {clientSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      $S = "...";

      ...

      new $F({clientSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      $S = "...";

      ...

      var $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      $S = "...";

      ...

      var $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      $S = "...";

      ...

      $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth2").Strategy;

      ...

      $S = "...";

      ...

      $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      new $F({secretOrKey: "..."}, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      var $P = {};

      ...

      $P.secretOrKey = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      var $P = {secretOrKey: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      var $S = "...";

      ...

      new $F({secretOrKey: $S}, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {};

      ...

      $P.secretOrKey = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {secretOrKey: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      $P = {};

      ...

      $P.secretOrKey = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      $P = {secretOrKey: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      $S = "...";

      ...

      new $F({secretOrKey: $S}, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      $S = "...";

      ...

      var $P = {};

      ...

      $P.secretOrKey = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      $S = "...";

      ...

      var $P = {secretOrKey: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      $S = "...";

      ...

      $P = {};

      ...

      $P.secretOrKey = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-jwt").Strategy;

      ...

      $S = "...";

      ...

      $P = {secretOrKey: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      new $F({consumerSecret: "..."}, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      var $P = {};

      ...

      $P.consumerSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      var $P = {consumerSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      var $S = "...";

      ...

      new $F({consumerSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {};

      ...

      $P.consumerSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {consumerSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      $P = {};

      ...

      $P.consumerSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      $P = {consumerSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      $S = "...";

      ...

      new $F({consumerSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      $S = "...";

      ...

      var $P = {};

      ...

      $P.consumerSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      $S = "...";

      ...

      var $P = {consumerSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      $S = "...";

      ...

      $P = {};

      ...

      $P.consumerSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-google-oauth1").Strategy;

      ...

      $S = "...";

      ...

      $P = {consumerSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      new $F({clientSecret: "..."}, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      var $P = {};

      ...

      $P.clientSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      var $P = {clientSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      var $S = "...";

      ...

      new $F({clientSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      $P = {};

      ...

      $P.clientSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      $P = {clientSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      $S = "...";

      ...

      new $F({clientSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      $S = "...";

      ...

      var $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      $S = "...";

      ...

      var $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      $S = "...";

      ...

      $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth2").Strategy;

      ...

      $S = "...";

      ...

      $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      new $F({clientSecret: "..."}, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      var $P = {};

      ...

      $P.clientSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      var $P = {clientSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      var $S = "...";

      ...

      new $F({clientSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      $P = {};

      ...

      $P.clientSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      $P = {clientSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      $S = "...";

      ...

      new $F({clientSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      $S = "...";

      ...

      var $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      $S = "...";

      ...

      var $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      $S = "...";

      ...

      $P = {};

      ...

      $P.clientSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-facebook").Strategy;

      ...

      $S = "...";

      ...

      $P = {clientSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      new $F({consumerSecret: "..."}, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      var $P = {};

      ...

      $P.consumerSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      var $P = {consumerSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      var $S = "...";

      ...

      new $F({consumerSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {};

      ...

      $P.consumerSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {consumerSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      $P = {};

      ...

      $P.consumerSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      $P = {consumerSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      $S = "...";

      ...

      new $F({consumerSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      $S = "...";

      ...

      var $P = {};

      ...

      $P.consumerSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      $S = "...";

      ...

      var $P = {consumerSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      $S = "...";

      ...

      $P = {};

      ...

      $P.consumerSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-twitter").Strategy;

      ...

      $S = "...";

      ...

      $P = {consumerSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      new $F({consumerSecret: "..."}, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      var $P = {};

      ...

      $P.consumerSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      var $P = {consumerSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      var $S = "...";

      ...

      new $F({consumerSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {};

      ...

      $P.consumerSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      var $S = "...";

      ...

      var $P = {consumerSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      $P = {};

      ...

      $P.consumerSecret = "...";

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      $P = {consumerSecret: "..."};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      $S = "...";

      ...

      new $F({consumerSecret: $S}, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      $S = "...";

      ...

      var $P = {};

      ...

      $P.consumerSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      $S = "...";

      ...

      var $P = {consumerSecret: $S};

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      $S = "...";

      ...

      $P = {};

      ...

      $P.consumerSecret = $S;

      ...

      new $F($P, ...);

      '
  - pattern: 'var $F = require("passport-oauth1").Strategy;

      ...

      $S = "...";

      ...

      $P = {consumerSecret: $S};

      ...

      new $F($P, ...);'
  severity: ERROR
- id: phantom-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `phantom` page methods it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - phantom
  patterns:
  - pattern-inside: '$PHANTOM = require(''phantom'');

      ...

      '
  - pattern-either:
    - pattern: $PAGE.open($INPUT,...)
    - pattern: $PAGE.property("content",$INPUT,...)
    - pattern: $PAGE.setContent($INPUT,...)
    - pattern: $PAGE.openUrl($INPUT,...)
    - pattern: $PAGE.evaluateJavaScript($INPUT,...)
  - pattern-not: $PAGE.open("...",...)
  - pattern-not: $PAGE.property("content","...",...)
  - pattern-not: $PAGE.setContent("...",...)
  - pattern-not: $PAGE.openUrl("...",...)
  - pattern-not: $PAGE.evaluateJavaScript("...",...)
  severity: WARNING
- id: playwright-addinitscript-code-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `addInitScript` method it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - playwright
  patterns:
  - pattern-inside: 'require(''playwright'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = function $FNAME(...){...};

      ...

      '
  - pattern: $CONTEXT.addInitScript($INPUT,...)
  - pattern-not: $CONTEXT.addInitScript("...",...)
  - pattern-not: $CONTEXT.addInitScript(function(...){...},...)
  severity: WARNING
- id: playwright-evaluate-arg-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `evaluate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - playwright
  patterns:
  - pattern-inside: 'require(''playwright'');

      ...

      '
  - pattern-either:
    - pattern-inside: function $FUNC (...,$INPUT,...) {...}
    - pattern-inside: function (...,$INPUT,...) {...}
  - pattern-either:
    - pattern: $PAGE.evaluate($CODE,...,<... $INPUT ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)
  severity: WARNING
- id: playwright-evaluate-code-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `evaluate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - playwright
  patterns:
  - pattern-inside: 'require(''playwright'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = function $FNAME(...){...};

      ...

      '
  - pattern-either:
    - pattern: $PAGE.evaluate($INPUT,...)
    - pattern: $PAGE.evaluateHandle($INPUT,...)
    - pattern: $PAGE.evaluateOnNewDocument($INPUT,...)
  - pattern-not: $PAGE.evaluate("...",...)
  - pattern-not: $PAGE.evaluate(function(...){...},...)
  - pattern-not: $PAGE.evaluateHandle("...",...)
  - pattern-not: $PAGE.evaluateHandle(function(...){...},...)
  - pattern-not: $PAGE.evaluateOnNewDocument("...",...)
  - pattern-not: $PAGE.evaluateOnNewDocument(function(...){...},...)
  severity: WARNING
- id: playwright-exposed-chrome-devtools
  languages:
  - javascript
  - typescript
  message: Remote debugging protocol does not perform any authentication, so exposing
    it too widely can be a security risk.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - playwright
  patterns:
  - pattern-inside: 'require(''playwright'');

      ...

      '
  - pattern-either:
    - pattern-regex: --remote-debugging-address
    - pattern-regex: --remote-debugging-port
    - pattern-regex: --remote-debugging-socket-name
    - pattern-regex: --remote-debugging-targets
  severity: WARNING
- id: playwright-goto-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `goto` method it can result in Server-Side
    Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - playwright
  patterns:
  - pattern-inside: 'require(''playwright'');

      ...

      '
  - pattern-not-inside: 'require(''playwright'');

      ...

      var $INPUT = "...";

      ...

      $PAGE.goto($INPUT,...)

      '
  - pattern: $PAGE.goto($INPUT,...)
  - pattern-not: $PAGE.goto("...",...)
  severity: WARNING
- id: playwright-setcontent-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `setContent` method it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - playwright
  patterns:
  - pattern-inside: 'require(''playwright'');

      ...

      '
  - pattern-not-inside: 'require(''playwright'');

      ...

      var $INPUT = "...";

      ...

      $PAGE.setContent($INPUT,...)

      '
  - pattern: $PAGE.setContent($INPUT,...)
  - pattern-not: $PAGE.setContent("...",...)
  severity: WARNING
- id: puppeteer-evaluate-arg-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `evaluate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - puppeteer
  patterns:
  - pattern-inside: 'require(''puppeteer'');

      ...

      '
  - pattern-either:
    - pattern-inside: function $FUNC (...,$INPUT,...) {...}
    - pattern-inside: function (...,$INPUT,...) {...}
  - pattern-either:
    - pattern: $PAGE.evaluate($CODE,...,<... $INPUT ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,...,<... $INPUT ...>,...)
  severity: WARNING
- id: puppeteer-evaluate-code-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `evaluate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - puppeteer
  patterns:
  - pattern-inside: 'require(''puppeteer'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = function $FNAME(...){...};

      ...

      '
  - pattern-either:
    - pattern: $PAGE.evaluate($INPUT,...)
    - pattern: $PAGE.evaluateHandle($INPUT,...)
    - pattern: $PAGE.evaluateOnNewDocument($INPUT,...)
  - pattern-not: $PAGE.evaluate("...",...)
  - pattern-not: $PAGE.evaluate(function(...){...},...)
  - pattern-not: $PAGE.evaluateHandle("...",...)
  - pattern-not: $PAGE.evaluateHandle(function(...){...},...)
  - pattern-not: $PAGE.evaluateOnNewDocument("...",...)
  - pattern-not: $PAGE.evaluateOnNewDocument(function(...){...},...)
  severity: WARNING
- id: puppeteer-exposed-chrome-devtools
  languages:
  - javascript
  - typescript
  message: Remote debugging protocol does not perform any authentication, so exposing
    it too widely can be a security risk.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - puppeteer
  patterns:
  - pattern-inside: 'require(''puppeteer'');

      ...

      '
  - pattern-either:
    - pattern-regex: --remote-debugging-address
    - pattern-regex: --remote-debugging-port
    - pattern-regex: --remote-debugging-socket-name
    - pattern-regex: --remote-debugging-targets
  severity: WARNING
- id: puppeteer-goto-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `goto` method it can result in Server-Side
    Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - puppeteer
  patterns:
  - pattern-inside: 'require(''puppeteer'');

      ...

      '
  - pattern-not-inside: 'require(''puppeteer'');

      ...

      var $INPUT = "...";

      ...

      $PAGE.goto($INPUT,...)

      '
  - pattern: $PAGE.goto($INPUT,...)
  - pattern-not: $PAGE.goto("...",...)
  severity: WARNING
- id: puppeteer-setcontent-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `setContent` method it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - puppeteer
  patterns:
  - pattern-inside: 'require(''puppeteer'');

      ...

      '
  - pattern-not-inside: 'require(''puppeteer'');

      ...

      var $INPUT = "...";

      ...

      '
  - pattern: $PAGE.setContent($INPUT,...)
  - pattern-not: $PAGE.setContent("...",...)
  severity: WARNING
- id: calling-set-state-on-current-state
  languages:
  - js
  message: Calling setState on the current state is always a no-op. Did you mean to
    change the state like $Y(!$X) instead?
  metadata:
    category: correctness
    technology:
    - react
  patterns:
  - pattern: $Y($X);
  - pattern-inside: 'const [$X, $Y] = useState(...);

      ...

      '
  severity: ERROR
- id: sandbox-code-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach `sandbox`.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - sandbox
  patterns:
  - pattern-inside: '$SANDBOX = require(''sandbox'');

      ...

      '
  - pattern-not-inside: '$CODE = "...";

      ...

      '
  - pattern-either:
    - patterns:
      - pattern-inside: '$S = new $SANDBOX(...);

          ...

          '
      - pattern: $S.run($CODE,...);
    - pattern: 'new $SANDBOX(...).run($CODE,...);

        '
  - pattern-not-inside: '$S = new $SANDBOX(...);

      ...

      $S.run("...",...);

      '
  - pattern-not-inside: new $SANDBOX(...).run("...",...);
  severity: WARNING
- id: sax-xxe
  languages:
  - javascript
  - typescript
  message: Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do
    anything with custom DTD entity definitions. If you're implementing a custom DTD
    entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities,
    or be absolutely sure that external entities received from a trusted source while
    processing XML.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    references:
    - https://github.com/Leonidas-from-XIV/node-xml2js/issues/415
    - https://github.com/isaacs/sax-js
    technology:
    - sax
  pattern-either:
  - pattern: 'require(''sax'');

      ...

      $PARSER.ondoctype = ...;

      '
  - pattern: 'require(''sax'');

      ...

      $PARSER.on(''doctype'',...);'
  severity: WARNING
- id: sequelize-enforce-tls
  languages:
  - javascript
  - typescript
  message: 'If TLS is disabled on server side (Postgresql server), Sequelize establishes
    connection without TLS and no error will be thrown. To prevent MITN (Man In The
    Middle) attack, TLS must be enforce by Sequelize. Set "ssl: true" or define settings
    "ssl: {...}"'
  metadata:
    category: security
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://node-postgres.com/features/ssl
    - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
    - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
    - https://nodejs.org/api/tls.html#tls_tls_default_min_version
    technology:
    - sequelize
  patterns:
  - pattern: "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: $DIALECT\n }\n"
  - pattern-not: "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: \"postgres\",\n
      \ dialectOptions: {\n      ssl: true\n  }\n}\n"
  - pattern-not: "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: $DIALECT,\n
      \ dialectOptions: {\n    ssl: { ... }\n  }\n}\n"
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
  severity: WARNING
- id: sequelize-raw-query
  languages:
  - javascript
  - typescript
  message: 'Avoiding SQL string concatenation: untrusted input concatenated with raw
    SQL query can result in SQL Injection. Data replacement or data binding should
    be used. See https://sequelize.org/master/manual/raw-queries.html'
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://sequelize.org/master/manual/raw-queries.html
    technology:
    - sequelize
  pattern-either:
  - pattern: '$DATABASE.sequelize.query(`...${...}...`, ...)

      '
  - pattern: '$QUERY = `...${...}...`

      ...

      $DATABASE.sequelize.query($QUERY, ...)

      '
  - pattern: '$DATABASE.sequelize.query($SQL + $VALUE, ...)

      '
  - pattern: '$QUERY = $SQL + $VALUE

      ...

      $DATABASE.sequelize.query($QUERY, ...)

      '
  severity: WARNING
- id: sequelize-tls-disabled-cert-validation
  languages:
  - javascript
  - typescript
  message: Set "rejectUnauthorized" to false is a convenient way to resolve certificate
    error. But this method is unsafe because it disables the server certificate verification,
    making the Node app open to MITM attack. "rejectUnauthorized" option must be alway
    set to True (default value). With self -signed certificate or custom CA, use "ca"
    option to define Root Certificate. This rule checks TLS configuration only for
    Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration.
    This rule could be extended for MSSQL, but the dialectOptions is specific for
    Tedious.
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation

      '
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://node-postgres.com/features/ssl
    - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
    - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
    technology:
    - sequelize
  patterns:
  - pattern: "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: $DIALECT,\n  dialectOptions:
      {\n    ssl: {\n      rejectUnauthorized: false\n    }\n  }\n }\n"
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
  severity: ERROR
- id: sequelize-weak-tls-version
  languages:
  - javascript
  - typescript
  message: TLS1.0 and TLS1.1 are deprecated and should be used anymore. By default,
    NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1.
    Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for
    Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration.
    This rule could be extended for MSSQL, but the dialectOptions is specific for
    Tedious.
  metadata:
    category: security
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://node-postgres.com/features/ssl
    - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
    - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
    - https://nodejs.org/api/tls.html#tls_tls_default_min_version
    technology:
    - sequelize
  patterns:
  - pattern-inside: "{\n  host: $HOST,\n  database: $DATABASE,\n  dialect: $DIALECT,\n
      \ dialectOptions:\n    { ssl: ... }\n }\n"
  - pattern-either:
    - pattern: "{\n  minVersion: 'TLSv1'\n}\n"
    - pattern: "{\n  minVersion: 'TLSv1.1'\n}\n"
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
  severity: WARNING
- id: unsafe-serialize-javascript
  languages:
  - javascript
  - typescript
  message: '`serialize-javascript` used with `unsafe` parameter, this could be vulnerable
    to XSS.'
  metadata:
    category: security
    cwe: 'CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page'
    owasp: 'A1: Injection'
    technology:
    - serialize-javascript
  patterns:
  - pattern-inside: '$S = require(''serialize-javascript'');

      ...

      '
  - pattern-not-inside: escape(...)
  - pattern-not-inside: encodeURI(...)
  - pattern: '$S(..., {unsafe: true});

      '
  severity: WARNING
- id: shelljs-exec-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `exec` method it can result in Remote
    Code Execution
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    technology:
    - shelljs
  patterns:
  - pattern-inside: 'require(''shelljs'');

      ...

      '
  - pattern-not-inside: 'require(''shelljs'');

      ...

      var $INPUT = "...";

      ...

      '
  - pattern: $SHELL.exec($INPUT,...)
  - pattern-not: $SHELL.exec("...",...)
  severity: WARNING
- id: multiargs-code-execution
  languages:
  - javascript
  - typescript
  message: Potential arbitrary code execution, piped to eval
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - thenify
  patterns:
  - pattern-either:
    - pattern: '$THENIFY($FN, {multiArgs: ...},...)

        '
    - pattern: '$OPTS = {multiArgs: ...};

        ...

        $THENIFY($FN,$OPTS,...);

        '
  - pattern-not: '$THENIFY($FN, {multiArgs: false},...)

      '
  - pattern-not: '$OPTS = {multiArgs: false};

      ...

      $THENIFY($FN,$OPTS,...)

      '
  - pattern-either:
    - pattern-inside: '$THENIFY = require(''thenify'');

        ...

        '
    - pattern-inside: 'import ''thenify'';

        ...

        '
  severity: WARNING
- id: vm2-code-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach `vm2`.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - vm2
  patterns:
  - pattern-inside: 'require(''vm2'');

      ...

      '
  - pattern-not-inside: '$CODE = "...";

      ...

      '
  - pattern-not-inside: 'require(''vm2'');

      ...

      $CODE = new VMScript(...);

      ...

      '
  - pattern-either:
    - pattern: '$VM = new VM(...);

        ...

        $VM.run($CODE,...);

        '
    - pattern: 'new VM(...).run($CODE,...);

        '
    - pattern: '$VM = new NodeVM(...);

        ...

        $VM.run($CODE,...);

        '
    - pattern: 'new NodeVM(...).run($CODE,...);

        '
    - pattern: 'new VMScript($CODE,...);

        '
  - pattern-not: '$VM = new VM(...);

      ...

      $VM.run("...",...);

      '
  - pattern-not: '$VM = new NodeVM(...);

      ...

      $VM.run("...",...);

      '
  - pattern-not: '(new VM(...)).run("...",...);

      '
  - pattern-not: '(new NodeVM(...)).run("...",...);

      '
  - pattern-not: new VMScript("...",...);
  severity: WARNING
- id: vm2-context-injection
  languages:
  - javascript
  - typescript
  message: Make sure that unverified user data can not reach `vm2`.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    technology:
    - vm2
  patterns:
  - pattern-inside: '$VM = require(''vm2'');

      ...

      '
  - pattern-either:
    - pattern: "function (...,$INPUT,...) {\n  ...\n  new VM({sandbox: <... $INPUT
        ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n
        \ $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  new VM({sandbox: <... $CONTEXT
        ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $OPTS = {sandbox: <... $INPUT
        ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n
        \ $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT
        ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  new VM({sandbox: <... $INPUT
        ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  new VM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n
        \ ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  new VM({sandbox: <...
        $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $OPTS = {sandbox: <... $INPUT
        ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n
        \ ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {sandbox: <...
        $CONTEXT ...>};\n  ...\n  new VM($OPTS,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  new NodeVM({sandbox: <... $INPUT
        ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n
        \ $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  new NodeVM({sandbox: <...
        $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $OPTS = {sandbox: <... $INPUT
        ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function (...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n  ...\n
        \ $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT
        ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  new NodeVM({sandbox: <...
        $INPUT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... {$NAME:$INPUT}
        ...>;\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  new NodeVM({sandbox: <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n
        \ ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  new NodeVM({sandbox:
        <... $CONTEXT ...>},...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $OPTS = {sandbox: <... $INPUT
        ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = <... $INPUT ...>;\n
        \ ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $CONTEXT = {$NAME: <... $INPUT
        ...>};\n  ...\n  $OPTS = {sandbox: <... $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n
        \ ...\n}\n"
    - pattern: "function $F(...,$INPUT,...) {\n  ...\n  $VAR = <... $INPUT ...>;\n
        \ ...\n  $CONTEXT = {$NAME: <... $VAR ...>};\n  ...\n  $OPTS = {sandbox: <...
        $CONTEXT ...>};\n  ...\n  new NodeVM($OPTS,...);\n  ...\n}"
  severity: WARNING
- id: avoid-v-html
  languages:
  - regex
  message: Dynamically rendering arbitrary HTML on your website can be very dangerous
    because it can easily lead to XSS vulnerabilities. Only use HTML interpolation
    on trusted content and never on user-provided content.
  metadata:
    category: security
    references:
    - https://vuejs.org/v2/guide/syntax.html#Raw-HTML
    technology:
    - vue
  paths:
    include:
    - '*.vue'
  pattern-regex: <[^<>]*v-html=
  severity: WARNING
- id: wkhtmltoimage-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `wkhtmltoimage` it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - wkhtmltoimage
  patterns:
  - pattern-inside: '$WK = require(''wkhtmltoimage'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = "...";

      ...

      '
  - pattern: $WK.generate($INPUT,...)
  - pattern-not: $WK.generate("...",...)
  severity: WARNING
- id: wkhtmltopdf-injection
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side
    Request Forgery vulnerabilities
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    technology:
    - wkhtmltopdf
  patterns:
  - pattern-inside: '$WK = require(''wkhtmltopdf'');

      ...

      '
  - pattern-not-inside: 'var $INPUT = "...";

      ...

      '
  - pattern: $WK($INPUT,...)
  - pattern-not: $WK("...",...)
  severity: WARNING
- id: xml2json-xxe
  languages:
  - javascript
  - typescript
  message: If unverified user data can reach the XML Parser it can result in XML External
    or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    asvs:
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      section: V5 Validation, Sanitization and Encoding
      version: '4'
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    technology:
    - xml2json
  patterns:
  - pattern: 'var $XML = require(''xml2json'');

      ...

      $XML.toJson(...);

      '
  - pattern-not: 'var $XML = require(''xml2json'');

      ...

      $XML.toJson("...",...);

      '
  - pattern-not: 'var $XML = require(''xml2json'');

      ...

      var $S = "...";

      ...

      $XML.toJson($S,...);'
  severity: WARNING
