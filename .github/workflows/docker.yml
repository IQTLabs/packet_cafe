name: buildx

on:
  push:
    branches:
      - main
      - develop
    tags: 'v*'

jobs:
  buildx:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Define list of images to build
      id: get_images
      run: |
        echo ::set-output name=NAMES::${NAMES}
      env:
        NAMES: admin ui messenger web redis lb workers
    - name: Get version number
      id: get_version
      run: |
        VERSION=$(git describe --tags)
        echo VERSION=${VERSION}
        echo ::set-output name=VERSION::${VERSION}

        TAG_VERSION=$(git describe --abbrev=0 --tags)
        echo TAG_VERSION=${TAG_VERSION}
        echo ::set-output name=TAG_VERSION::${TAG_VERSION}

        if [[ ${VERSION} == ${TAG_VERSION} ]] ||
           [[ "${GITHUB_REF##*/}" == "main" ]]; then
          IS_RELEASE="true"
        else
          IS_RELEASE="false"
        fi
        echo IS_RELEASE=${IS_RELEASE}
        echo ::set-output name=IS_RELEASE::${IS_RELEASE}
    - name: Should this workflow push to Docker Hub?
      id: docker
      env:
        DOCKER_PASSWORD:  ${{ secrets.DOCKER_TOKEN }}
        DOCKER_USERNAME:  ${{ secrets.DOCKER_USERNAME }}
        DOCKER_NAMESPACE:  ${{ secrets.DOCKER_NAMESPACE }}
      run: |
        PUSH_TO_DOCKER="false"
        if [[ "${{ github.event_name }}" == "push" ]] &&
           [[ "${{ steps.get_version.outputs.IS_RELEASE }}" == "true" ]]
        then
          # Must define all three variables for Docker Hub publishing to work
          [[ -z "$DOCKER_USERNAME" ]] && (echo "Must define secret: DOCKER_USERNAME"; exit 1)
          [[ -z "$DOCKER_PASSWORD" ]] && (echo "Must define secret: DOCKER_PASSWORD"; exit 1)
          [[ -z "$DOCKER_NAMESPACE" ]] && (echo "Must define secret: DOCKER_NAMESPACE"; exit 1)
          PUSH_TO_DOCKER="true"
        fi
        echo ::set-output name=PUSH_TO_DOCKER::${PUSH_TO_DOCKER}
        echo PUSH_TO_DOCKER=${PUSH_TO_DOCKER}
    - name: Change tag for release on main branch
      id: publish_tag
      run: |
        echo GITHUB_REF=${GITHUB_REF}
        echo 'GITHUB_REF##*/'=${GITHUB_REF##*/}
        if [[ "${GITHUB_REF##*/}" == "main" ]]; then
          echo ::set-output name=TAG::latest;
          echo TAG=latest
        else
          echo ::set-output name=TAG::${VERSION};
          echo TAG=${VERSION}
        fi
      env:
        VERSION: ${{ steps.get_version.outputs.VERSION }}
    - name: Test building only
      run: |
        for N in ${{ steps.get_images.outputs.NAMES }}
        do
          docker build ${N}
        done
      if: steps.docker.outputs.PUSH_TO_DOCKER == 'false'
    - name: Set up qemu
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
      if: success() && (steps.docker.outputs.PUSH_TO_DOCKER == 'true')
    - name: Docker Login
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      if: success() && (steps.docker.outputs.PUSH_TO_DOCKER == 'true')
    - name: Build and push platforms
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
      run: |
        for N in ${{ steps.get_images.outputs.NAMES }}
        do
          TAGGED_IMAGE="${{ secrets.DOCKER_NAMESPACE }}/packet_cafe_${N}:${{ steps.publish_tag.outputs.TAG }}"
          docker buildx build \
            --platform linux/amd64,linux/arm/v7,linux/arm64 \
            --push \
            -t ${TAGGED_IMAGE} ${N}
        done
      if: success() && (steps.docker.outputs.PUSH_TO_DOCKER == 'true')
    - name: List available tags for images
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
      run: |
        for N in ${{ steps.get_images.outputs.NAMES }}
        do
          image="${{ secrets.DOCKER_NAMESPACE }}/packet_cafe_${N}"
          echo "${image}:" $(
            wget -q https://registry.hub.docker.com/v1/repositories/${image}/tags -O - |
              tr -d '[]" ' |
              tr '}' '\n' |
              awk -F: '{printf $3 " "}'
          )
        done
      if: success() && (steps.docker.outputs.PUSH_TO_DOCKER == 'true')
